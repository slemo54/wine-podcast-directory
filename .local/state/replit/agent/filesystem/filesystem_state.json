{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"replit.md":{"content":"# Wine Podcast Directory\n\n## Overview\n\nA comprehensive full-stack web application for discovering and managing wine podcasts. The system provides advanced search and filtering capabilities, CSV data import functionality, and a modern React-based user interface. Built with a PostgreSQL database backend and Express.js API, it serves as a centralized directory for wine enthusiasts to find podcasts matching their interests.\n\nThe application features a podcast directory with detailed metadata including country, language, categories, episode length, and social media links. Users can search, filter, and explore podcasts through an intuitive interface with both grid and list view modes.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n**Frontend Architecture**\n- React 18 with TypeScript for type safety and modern component patterns\n- Vite as the build tool for fast development and optimized production builds\n- Tailwind CSS with shadcn/ui component library for consistent, accessible UI components\n- TanStack Query for efficient data fetching, caching, and synchronization\n- Wouter for lightweight client-side routing\n- Custom CSS variables for theming with wine-inspired color palette\n\n**Backend Architecture**\n- Express.js server with TypeScript for type-safe API development\n- RESTful API design with endpoints for podcast CRUD operations, search, and statistics\n- Modular route handling with separate storage abstraction layer\n- File upload support using Multer for CSV import functionality\n- Session management with PostgreSQL session store\n- Error handling middleware for consistent API responses\n\n**Database Design**\n- PostgreSQL with Drizzle ORM for type-safe database operations\n- Single podcasts table with comprehensive metadata fields including:\n  - Basic info (title, host, country, language, year, status)\n  - Categorization (categories array, episode length, episode count)\n  - Social media links (JSON field for flexible platform support)\n- Database migrations managed through Drizzle Kit\n- Connection pooling with Neon serverless driver for scalability\n\n**Data Management**\n- CSV import system for bulk podcast data ingestion\n- Data validation using Zod schemas for consistent data integrity\n- Search functionality with full-text search across multiple fields\n- Advanced filtering by categories, country, language, status, and episode length\n- Sorting capabilities by various fields (title, year, episodes, country)\n\n**Component Architecture**\n- Reusable UI components following atomic design principles\n- Search and filter components with real-time updates\n- Podcast card components supporting both grid and list view modes\n- Statistics dashboard for data visualization\n- CSV import interface with progress tracking and error handling\n\n**State Management**\n- React Query for server state management and caching\n- Local state management using React hooks\n- Form state handling with React Hook Form and Zod validation\n- Toast notifications for user feedback\n\n**Build and Development**\n- TypeScript configuration with path aliases for clean imports\n- ESBuild for server bundling in production\n- Vite plugins for development tools and Replit integration\n- PostCSS with Tailwind for CSS processing\n- Development and production environment separation\n\n## External Dependencies\n\n**Database Services**\n- Neon PostgreSQL for managed database hosting\n- Connection pooling and serverless architecture support\n\n**UI and Styling**\n- Radix UI primitives for accessible, unstyled components\n- Tailwind CSS for utility-first styling approach\n- Font Awesome for iconography\n- Google Fonts integration (Inter, Playfair Display)\n\n**Development Tools**\n- Drizzle Kit for database schema management and migrations\n- TanStack Query for advanced data fetching patterns\n- React Hook Form with Hookform Resolvers for form validation\n- CSV Parser for data import functionality\n\n**Build and Runtime**\n- Vite ecosystem including various plugins for development\n- Express.js middleware ecosystem\n- Node.js runtime with ES modules support\n- TypeScript compiler with strict type checking\n\n**File Upload and Processing**\n- Multer for handling multipart form data\n- CSV parsing libraries for data import\n- Stream processing for efficient file handling","size_bytes":4297},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \"var(--radius)\",\n        md: \"calc(var(--radius) - 2px)\",\n        sm: \"calc(var(--radius) - 4px)\",\n      },\n      colors: {\n        background: \"var(--background)\",\n        foreground: \"var(--foreground)\",\n        card: {\n          DEFAULT: \"var(--card)\",\n          foreground: \"var(--card-foreground)\",\n        },\n        popover: {\n          DEFAULT: \"var(--popover)\",\n          foreground: \"var(--popover-foreground)\",\n        },\n        primary: {\n          DEFAULT: \"var(--primary)\",\n          foreground: \"var(--primary-foreground)\",\n        },\n        secondary: {\n          DEFAULT: \"var(--secondary)\",\n          foreground: \"var(--secondary-foreground)\",\n        },\n        muted: {\n          DEFAULT: \"var(--muted)\",\n          foreground: \"var(--muted-foreground)\",\n        },\n        accent: {\n          DEFAULT: \"var(--accent)\",\n          foreground: \"var(--accent-foreground)\",\n        },\n        destructive: {\n          DEFAULT: \"var(--destructive)\",\n          foreground: \"var(--destructive-foreground)\",\n        },\n        border: \"var(--border)\",\n        input: \"var(--input)\",\n        ring: \"var(--ring)\",\n        chart: {\n          \"1\": \"var(--chart-1)\",\n          \"2\": \"var(--chart-2)\",\n          \"3\": \"var(--chart-3)\",\n          \"4\": \"var(--chart-4)\",\n          \"5\": \"var(--chart-5)\",\n        },\n        sidebar: {\n          DEFAULT: \"var(--sidebar-background)\",\n          foreground: \"var(--sidebar-foreground)\",\n          primary: \"var(--sidebar-primary)\",\n          \"primary-foreground\": \"var(--sidebar-primary-foreground)\",\n          accent: \"var(--sidebar-accent)\",\n          \"accent-foreground\": \"var(--sidebar-accent-foreground)\",\n          border: \"var(--sidebar-border)\",\n          ring: \"var(--sidebar-ring)\",\n        },\n        wine: {\n          50: \"var(--wine-50)\",\n          100: \"var(--wine-100)\",\n          200: \"var(--wine-200)\",\n          300: \"var(--wine-300)\",\n          400: \"var(--wine-400)\",\n          500: \"var(--wine-500)\",\n          600: \"var(--wine-600)\",\n          700: \"var(--wine-700)\",\n          800: \"var(--wine-800)\",\n          900: \"var(--wine-900)\",\n          950: \"var(--wine-950)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3165},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"attached_assets/IMPROVEMENTS_1758189167080.md":{"content":"# Wine Podcast Directory - Improvements Made\n\n## ✅ Fixed Issues (September 2025)\n\n### 🔧 Critical Filter Fixes\n- **Fixed multi-select filters not working** - Country, Language, Audience, and Categories now properly support multiple selections\n- **Fixed Clear All button preventing further searches** - Properly resets all filters and allows new filtering\n- **Added real-time filtering** - All filter changes now apply immediately without clicking \"Apply Filters\"\n\n### 🎨 UI/UX Improvements\n- **Enhanced multi-select styling** - Better visual feedback for selected options\n- **Added notification system** - Users get confirmation when clearing filters\n- **Improved filter handling** - Better error handling for empty/null values\n\n### 🛠️ Technical Improvements\n- **Better event listener management** - All filter controls now have proper event handlers\n- **Improved search functionality** - Enhanced text search with better partial matching\n- **Code optimization** - Cleaner filter logic and better performance\n\n## 📝 Code Changes\n\n### Modified Files:\n1. **script.js**\n   - `clearFilters()` function completely rewritten\n   - `applyFilters()` function improved for multi-select handling\n   - Added `clearMultiSelect()` helper function\n   - Added `showNotification()` for user feedback\n   - Enhanced event listener setup\n\n2. **styles.css**\n   - Added multi-select specific styling\n   - Added notification system styles\n   - Improved visual feedback for selected options\n\n3. **test.html** (new)\n   - Created comprehensive testing page\n   - Includes manual testing instructions\n   - Documents all improvements made\n\n## 🎯 Testing Instructions\n\n1. Open `test.html` for detailed testing guide\n2. Test multi-select functionality on Country, Language, Audience, Categories\n3. Test Clear All button functionality\n4. Verify real-time filtering works on all controls\n5. Check for proper notifications when clearing filters\n\n## 📊 Results\n\n- ✅ Multi-select filters now work correctly\n- ✅ Clear All button fully functional\n- ✅ Real-time filtering implemented\n- ✅ Better user experience with notifications\n- ✅ No more broken functionality after clearing filters\n\n## 🔄 Next Steps (Future Enhancements)\n\n- [ ] Add filter presets/saved searches\n- [ ] Implement advanced search operators\n- [ ] Add export functionality for filtered results\n- [ ] Mobile responsiveness improvements\n- [ ] Performance optimization for large datasets\n\n---\n\n**Last Updated:** September 17, 2025\n**Status:** All critical issues resolved ✅","size_bytes":2529},"attached_assets/INFINITE_LOADING_FIX_REPORT_1758189167078.md":{"content":"# Wine Podcast Directory - Infinite Loading Issue Fix Report\n\n## Issue Summary\nThe Wine Podcast Directory web application was experiencing an infinite loading issue where the loading spinner would never disappear, preventing users from seeing the podcast data.\n\n## Root Cause Analysis\n\n### Primary Issues Identified:\n\n1. **Uncaught JavaScript Errors in Data Processing**\n   - `script.js` lines 54, 57, 60: Calling `.split()` on potentially undefined string properties\n   - `script.js` line 89: Calling `.split()` on language field without null checks\n   - `script.js` line 363: Calling `.includes()` on potentially undefined `format` property\n\n2. **Missing Error Handling**\n   - No error boundaries around critical data processing functions\n   - Loading spinner not hidden when errors occurred\n   - No validation of PODCAST_DATA before processing\n\n### How These Issues Caused Infinite Loading:\nWhen any of these JavaScript errors occurred during the data loading process, the execution would stop at the error point, preventing the `hideLoading()` function from being called. This left the loading spinner visible indefinitely.\n\n## Fixes Applied\n\n### 1. Safe String Processing\n**File:** `script.js`\n- Added type checking before calling string methods\n- Replaced unsafe `.split()` calls with protected versions\n- Fixed format field access with null checking\n\n**Before:**\n```javascript\nif (p.language) {\n    p.language.split(',').forEach(lang => languages.add(lang.trim()));\n}\n```\n\n**After:**\n```javascript\nif (p.language && typeof p.language === 'string') {\n    p.language.split(',').forEach(lang => languages.add(lang.trim()));\n}\n```\n\n### 2. Enhanced Error Handling\n**File:** `script.js`\n- Added comprehensive logging to track loading progress\n- Wrapped critical functions in try-catch blocks\n- Ensured `hideLoading()` is called even when errors occur\n- Added validation for PODCAST_DATA availability and structure\n\n**Enhanced loadPodcastData() function:**\n```javascript\nasync function loadPodcastData() {\n    try {\n        console.log('🔄 Starting to load podcast data...');\n\n        // Validate PODCAST_DATA\n        if (!PODCAST_DATA) {\n            throw new Error('PODCAST_DATA is not defined');\n        }\n\n        if (!Array.isArray(PODCAST_DATA)) {\n            throw new Error('PODCAST_DATA is not an array');\n        }\n\n        // ... rest of loading process with progress logging\n\n        hideLoading();\n    } catch (error) {\n        console.error('❌ Error loading podcast data:', error);\n        showError(`Error loading podcast data: ${error.message}`);\n        hideLoading(); // Critical: hide loading even on error\n    }\n}\n```\n\n### 3. Individual Function Protection\n**Added error handling to:**\n- `populateFilters()` - Protected individual podcast processing\n- `updateStats()` - Added try-catch wrapper\n- Added index tracking for better error reporting\n\n## Testing and Validation\n\n### Created Test Files:\n1. **debug-test.html** - Basic data loading validation\n2. **test-fixes.html** - Comprehensive test suite validating all fixes\n\n### Test Coverage:\n- PODCAST_DATA existence and structure validation\n- Safe string processing verification\n- Error-free execution of all critical functions\n- Loading process simulation\n\n## Files Modified\n\n1. **script.js** - Main application logic with error handling improvements\n2. **debug-test.html** - Created for testing\n3. **test-fixes.html** - Created for comprehensive validation\n4. **INFINITE_LOADING_FIX_REPORT.md** - This documentation\n\n## Expected Results\n\nAfter applying these fixes:\n\n✅ **Loading spinner will properly hide** after data loading completes\n✅ **Error messages will display** if data loading fails instead of infinite loading\n✅ **Application will be more robust** against malformed data\n✅ **Better debugging capability** with comprehensive logging\n✅ **Graceful error handling** ensures UI remains responsive\n\n## Browser Console Monitoring\n\nThe enhanced logging will show:\n- 🔄 Progress indicators for each loading step\n- ✅ Success confirmations\n- ❌ Error details if issues occur\n- Specific error locations for easier debugging\n\n## Verification Steps\n\n1. Open `index.html` in a web browser\n2. Open browser developer tools (F12)\n3. Check console for loading progress messages\n4. Verify loading spinner disappears and podcasts display\n5. Run `test-fixes.html` for comprehensive validation\n\n## Future Recommendations\n\n1. Consider adding data validation schemas\n2. Implement retry mechanisms for network-related failures\n3. Add user-friendly error messages\n4. Consider progressive loading for large datasets\n5. Add unit tests for critical functions\n\n---\n**Fix Date:** September 17, 2025\n**Status:** Resolved\n**Testing:** Completed","size_bytes":4713},"attached_assets/SITEGROUND_DEPLOYMENT_GUIDE_1758189167076.md":{"content":"# 🍷 Wine Podcast Directory - SiteGround Deployment Guide\n\n## 📋 Overview\n\nThis comprehensive guide will walk you through deploying the Wine Podcast Directory system on SiteGround hosting. The system includes a frontend interface, PHP backend API, and MySQL database integration.\n\n### System Components\n- **Frontend**: HTML/CSS/JavaScript interface with search and filtering\n- **Backend**: PHP REST API with database integration\n- **Database**: MySQL with podcast data and analytics\n- **Data Pipeline**: CSV import and JS export functionality\n\n---\n\n## 🛠️ Pre-Deployment Checklist\n\n### ✅ Required Information\n- [ ] SiteGround hosting account credentials\n- [ ] Database credentials (provided in project):\n  - **Host**: localhost\n  - **Database**: dbzy6z57enkwbn\n  - **Username**: ucq0fwugcqhuz\n  - **Password**: |p$3i%3o1231\n- [ ] Domain name where the application will be hosted\n- [ ] FTP/File Manager access to hosting account\n\n### ✅ Files to Deploy\n```\n📁 Project Files:\n├── index.html (main frontend)\n├── script.js (frontend logic)\n├── styles.css (styling)\n├── podcasts-data.js (current data)\n└── backend/ (complete PHP system)\n    ├── config/database.php\n    ├── api/podcasts.php\n    ├── api/import-csv.php\n    ├── api/export-js.php\n    ├── admin/index.php\n    └── install.sql\n```\n\n---\n\n## 🚀 Step-by-Step Deployment\n\n### Step 1: Database Setup\n\n#### 1.1 Access SiteGround Database\n1. Log into your SiteGround hosting account\n2. Navigate to **Site Tools** → **Databases** → **MySQL**\n3. Verify the database exists:\n   - Database name: `dbzy6z57enkwbn`\n   - Username: `ucq0fwugcqhuz`\n\n#### 1.2 Import Database Schema\n1. Access **phpMyAdmin** from Site Tools\n2. Select the database `dbzy6z57enkwbn`\n3. Go to **Import** tab\n4. Upload the `backend/install.sql` file\n5. Click **Go** to execute\n\n```sql\n-- Verify installation with this query:\nSHOW TABLES;\n-- Should show: podcasts, podcast_analytics (optional)\n\n-- Check table structure:\nDESCRIBE podcasts;\n```\n\n#### 1.3 Test Database Connection\n1. Upload `backend/config/database.php` to a temporary location\n2. Access it via browser: `yoursite.com/path/database.php?action=test`\n3. Should return JSON with connection success\n\n---\n\n### Step 2: Backend Deployment\n\n#### 2.1 Upload Backend Files\nUsing SiteGround File Manager or FTP:\n\n```\n📁 Upload Structure:\npublic_html/\n├── backend/\n│   ├── config/\n│   │   └── database.php\n│   ├── api/\n│   │   ├── podcasts.php\n│   │   ├── import-csv.php\n│   │   └── export-js.php\n│   └── admin/\n│       ├── index.php\n│       ├── login.php\n│       └── includes/\n```\n\n#### 2.2 Set File Permissions\n```bash\n# Via SSH or File Manager:\nchmod 755 backend/\nchmod 755 backend/api/\nchmod 644 backend/api/*.php\nchmod 644 backend/config/*.php\n```\n\n#### 2.3 Test API Endpoints\nTest each endpoint after upload:\n\n```bash\n# Test main API:\ncurl \"https://yoursite.com/backend/api/podcasts.php?limit=5\"\n\n# Expected response:\n{\n  \"success\": true,\n  \"data\": {\n    \"data\": [...],\n    \"pagination\": {...}\n  }\n}\n```\n\n---\n\n### Step 3: Frontend Deployment\n\n#### 3.1 Upload Frontend Files\n```\n📁 Upload to public_html/:\n├── index.html\n├── script.js\n├── styles.css\n└── podcasts-data.js\n```\n\n#### 3.2 Configure API URLs\nEdit `script.js` to point to your domain:\n\n```javascript\n// Update this line in script.js:\nconst API_BASE_URL = 'https://yoursite.com/backend/api';\n\n// Instead of:\nconst API_BASE_URL = 'http://localhost/backend/api';\n```\n\n#### 3.3 Test Frontend\n1. Access `https://yoursite.com`\n2. Verify page loads with podcast data\n3. Test search functionality\n4. Test category filters\n\n---\n\n### Step 4: Data Import Process\n\n#### 4.1 Prepare CSV Data\nEnsure your CSV file has these columns:\n```csv\ntitle,host,country,language,year,active,categories,audience,format,duration,frequency,episodes,website,instagram,linkedin,facebook,spotify,youtube,apple,soundcloud,amazon,iheart,description,sample_episode,recommendations,logo,email\n```\n\n#### 4.2 Import via Admin Panel\n1. Access `https://yoursite.com/backend/admin/`\n2. Log in with admin credentials\n3. Use CSV import functionality\n4. Verify data import success\n\n#### 4.3 Alternative: Direct Database Import\nUsing phpMyAdmin:\n```sql\nLOAD DATA INFILE '/path/to/podcasts.csv'\nINTO TABLE podcasts\nFIELDS TERMINATED BY ','\nOPTIONALLY ENCLOSED BY '\"'\nLINES TERMINATED BY '\\n'\nIGNORE 1 ROWS;\n```\n\n---\n\n### Step 5: Generate JavaScript Data File\n\n#### 5.1 Run Export Process\nAccess the export endpoint:\n```bash\n# This should generate podcasts-data.js:\ncurl \"https://yoursite.com/backend/api/export-js.php\"\n```\n\n#### 5.2 Verify Generated File\nCheck that `podcasts-data.js` contains:\n```javascript\nconst podcastsData = [\n  {\n    \"id\": 1,\n    \"title\": \"Podcast Name\",\n    // ... other fields\n  }\n  // ... more podcasts\n];\n```\n\n#### 5.3 Update Frontend Reference\nEnsure `index.html` loads the generated file:\n```html\n<script src=\"podcasts-data.js\"></script>\n<script src=\"script.js\"></script>\n```\n\n---\n\n## 🔧 Configuration & Optimization\n\n### PHP Configuration\nAdd to `.htaccess` in backend folder:\n```apache\n# Enable error reporting (remove in production)\nphp_flag display_errors on\nphp_value error_reporting E_ALL\n\n# Security headers\nHeader always set X-Content-Type-Options nosniff\nHeader always set X-Frame-Options DENY\n\n# API CORS settings\nHeader always set Access-Control-Allow-Origin \"*\"\nHeader always set Access-Control-Allow-Methods \"GET, POST, PUT, DELETE, OPTIONS\"\nHeader always set Access-Control-Allow-Headers \"Content-Type, Authorization\"\n```\n\n### Database Optimization\n```sql\n-- Add indexes for better performance:\nALTER TABLE podcasts ADD INDEX idx_country (country);\nALTER TABLE podcasts ADD INDEX idx_language (language);\nALTER TABLE podcasts ADD INDEX idx_year (year);\nALTER TABLE podcasts ADD INDEX idx_active (active);\n\n-- Full-text search index:\nALTER TABLE podcasts ADD FULLTEXT(title, host, description, categories);\n```\n\n### Caching Configuration\nAdd to main `.htaccess`:\n```apache\n# Cache static files\n<IfModule mod_expires.c>\n    ExpiresActive On\n    ExpiresByType text/css \"access plus 1 month\"\n    ExpiresByType application/javascript \"access plus 1 month\"\n    ExpiresByType image/png \"access plus 1 year\"\n    ExpiresByType image/jpg \"access plus 1 year\"\n    ExpiresByType image/jpeg \"access plus 1 year\"\n</IfModule>\n\n# Compress files\n<IfModule mod_deflate.c>\n    AddOutputFilterByType DEFLATE text/html text/plain text/xml text/css application/javascript\n</IfModule>\n```\n\n---\n\n## 🧪 Testing Deployment\n\n### Automated Testing\nRun the test suites after deployment:\n\n```bash\n# 1. Backend API Tests:\nphp tests/backend-api-tests.php https://yoursite.com\n\n# 2. Database Tests:\nphp tests/database-integration-tests.php\n\n# 3. Frontend Tests:\n# Open: https://yoursite.com/tests/frontend-integration-tests.html\n\n# 4. E2E Tests:\n# Open: https://yoursite.com/tests/e2e-test-suite.html\n```\n\n### Manual Testing Checklist\n- [ ] Main page loads within 3 seconds\n- [ ] Search functionality works\n- [ ] Category filters function properly\n- [ ] Episode length filter works\n- [ ] Podcast details modal opens\n- [ ] Favorites system works\n- [ ] Mobile responsive design\n- [ ] All API endpoints respond correctly\n- [ ] Database queries execute successfully\n\n---\n\n## 📊 Monitoring & Maintenance\n\n### Performance Monitoring\n1. **Page Load Speed**: Use Google PageSpeed Insights\n2. **API Response Times**: Monitor via server logs\n3. **Database Performance**: Check slow query log\n4. **Error Monitoring**: Review PHP error logs\n\n### Regular Maintenance Tasks\n- **Weekly**: Review error logs\n- **Monthly**: Update podcast data via CSV import\n- **Quarterly**: Database optimization and cleanup\n- **Annually**: Security updates and dependency updates\n\n### Log Locations (SiteGround)\n```\n📁 Important Log Files:\n├── /logs/error_log (PHP errors)\n├── /logs/access_log (HTTP requests)\n└── MySQL slow query log (via phpMyAdmin)\n```\n\n---\n\n## 🚨 Troubleshooting Guide\n\n### Common Issues & Solutions\n\n#### Issue: Database Connection Failed\n```\nError: \"Database connection failed\"\n```\n**Solution**:\n1. Verify database credentials in `backend/config/database.php`\n2. Check if database exists in SiteGround panel\n3. Ensure database user has proper permissions\n\n#### Issue: API Returns 500 Error\n```\nHTTP 500 Internal Server Error\n```\n**Solution**:\n1. Check PHP error log: `/logs/error_log`\n2. Verify file permissions (755 for directories, 644 for files)\n3. Ensure all required PHP extensions are enabled\n\n#### Issue: Frontend Not Loading Data\n```\nError: \"No podcasts found\"\n```\n**Solution**:\n1. Verify `podcasts-data.js` is generated and accessible\n2. Check browser console for JavaScript errors\n3. Confirm API endpoints are accessible\n\n#### Issue: Search Not Working\n```\nSearch returns no results\n```\n**Solution**:\n1. Check full-text search index exists:\n   ```sql\n   SHOW INDEX FROM podcasts WHERE Index_type = 'FULLTEXT';\n   ```\n2. Verify search parameters in API call\n3. Test search query directly in database\n\n#### Issue: Import CSV Fails\n```\nError importing CSV data\n```\n**Solution**:\n1. Verify CSV format matches expected columns\n2. Check file upload permissions\n3. Review CSV for special characters or encoding issues\n\n### Debug Mode\nEnable debug mode by adding to `backend/config/database.php`:\n```php\n// Add at top of file:\nini_set('display_errors', 1);\nerror_reporting(E_ALL);\n\n// Add logging:\nfunction debugLog($message) {\n    error_log(date('Y-m-d H:i:s') . ' - ' . $message . PHP_EOL, 3, 'debug.log');\n}\n```\n\n---\n\n## 🔒 Security Considerations\n\n### Production Security Checklist\n- [ ] Remove debug/test files\n- [ ] Disable PHP error display\n- [ ] Set proper file permissions\n- [ ] Enable HTTPS\n- [ ] Configure security headers\n- [ ] Regular database backups\n- [ ] Update PHP version regularly\n\n### Backup Strategy\n```bash\n# Database Backup:\nmysqldump -u username -p dbzy6z57enkwbn > backup_$(date +%Y%m%d).sql\n\n# File Backup:\ntar -czf website_backup_$(date +%Y%m%d).tar.gz public_html/\n```\n\n### Security Headers\nAdd to main `.htaccess`:\n```apache\n# Security Headers\nHeader always set Strict-Transport-Security \"max-age=31536000; includeSubDomains\"\nHeader always set X-Content-Type-Options nosniff\nHeader always set X-Frame-Options DENY\nHeader always set X-XSS-Protection \"1; mode=block\"\nHeader always set Referrer-Policy \"strict-origin-when-cross-origin\"\n```\n\n---\n\n## 📞 Support & Resources\n\n### SiteGround Resources\n- **Documentation**: [SiteGround Help Center](https://www.siteground.com/support/)\n- **Site Tools**: Access via hosting panel\n- **24/7 Support**: Available via chat/ticket\n\n### Project-Specific Support\n- **Test Suites**: Use provided test files for validation\n- **Error Logs**: Monitor regularly for issues\n- **Performance**: Use built-in monitoring tools\n\n### Useful Commands\n```bash\n# Check PHP version:\nphp -v\n\n# Test database connection:\nmysql -h localhost -u ucq0fwugcqhuz -p dbzy6z57enkwbn\n\n# Check disk space:\ndf -h\n\n# Monitor error logs:\ntail -f /logs/error_log\n```\n\n---\n\n## ✅ Post-Deployment Verification\n\n### Final Checklist\n1. **Environment Status**:\n   - [ ] Database: 🟢 Connected\n   - [ ] API: 🟢 Responding\n   - [ ] Frontend: 🟢 Loading\n   - [ ] Search: 🟢 Working\n\n2. **Performance**:\n   - [ ] Page load: < 3 seconds\n   - [ ] API response: < 1 second\n   - [ ] Search response: < 2 seconds\n\n3. **Functionality**:\n   - [ ] All filters working\n   - [ ] Modal dialogs functioning\n   - [ ] Mobile responsive\n   - [ ] Error handling graceful\n\n4. **Security**:\n   - [ ] HTTPS enabled\n   - [ ] Security headers set\n   - [ ] Debug mode disabled\n   - [ ] File permissions correct\n\n### Success Metrics\n- **Uptime**: 99.9%\n- **Page Load Speed**: < 3 seconds\n- **API Response Time**: < 1 second\n- **Search Accuracy**: Relevant results\n- **Mobile Compatibility**: All features work\n\n---\n\n## 🎉 Deployment Complete!\n\nYour Wine Podcast Directory is now successfully deployed on SiteGround. The system includes:\n\n✅ **Complete Frontend** with search and filtering\n✅ **Robust Backend API** with database integration\n✅ **Data Management** via CSV import/export\n✅ **Performance Optimization** for fast loading\n✅ **Comprehensive Testing** suite for validation\n\n**Next Steps**:\n1. Monitor performance and error logs\n2. Plan regular data updates\n3. Consider additional features based on user feedback\n4. Implement analytics for usage tracking\n\nFor ongoing support, refer to the troubleshooting section and use the provided test suites to validate system health.","size_bytes":12632},"attached_assets/TESTING_DEPLOYMENT_SUMMARY_1758189167075.md":{"content":"# 🍷 Wine Podcast Directory - Complete Testing & Deployment System\n\n## 📋 System Overview\n\nThis comprehensive system provides complete testing coverage and deployment guidance for the Wine Podcast Directory. The system includes frontend interface testing, backend API validation, database integrity checks, and end-to-end user journey testing.\n\n---\n\n## 🎯 What Has Been Completed\n\n### ✅ **1. Frontend Integration Test Suite**\n**File**: `/tests/frontend-integration-tests.html`\n\n**Features**:\n- Interactive web-based test interface\n- Real-time test execution with visual feedback\n- Search functionality validation\n- Category filtering tests\n- Episode length filter verification\n- Modal and favorites functionality testing\n- Responsive design validation\n- Infinite loading prevention checks\n\n**Usage**:\n```bash\n# Open in browser:\nopen tests/frontend-integration-tests.html\n# Or visit: https://yoursite.com/tests/frontend-integration-tests.html\n```\n\n### ✅ **2. Backend API Test Suite**\n**File**: `/tests/backend-api-tests.php`\n\n**Features**:\n- Comprehensive API endpoint testing\n- Database connectivity validation\n- CRUD operations testing\n- Error handling verification\n- Performance benchmarking\n- Security vulnerability checks\n- Pagination and filtering tests\n\n**Usage**:\n```bash\n# Test local development:\nphp tests/backend-api-tests.php http://localhost\n\n# Test production:\nphp tests/backend-api-tests.php https://yoursite.com\n\n# Test specific endpoints:\nphp tests/backend-api-tests.php https://yoursite.com search\n```\n\n### ✅ **3. Database Integration Tests**\n**File**: `/tests/database-integration-tests.php`\n\n**Features**:\n- Database connection and configuration validation\n- Schema structure verification\n- Index and constraint testing\n- Data integrity checks\n- Full-text search validation\n- CRUD operations testing\n- Transaction handling\n- Performance monitoring\n\n**Usage**:\n```bash\n# Run all database tests:\nphp tests/database-integration-tests.php\n\n# Clean up test data:\nphp tests/database-integration-tests.php cleanup\n```\n\n### ✅ **4. End-to-End Test Suite**\n**File**: `/tests/e2e-test-suite.html`\n\n**Features**:\n- Complete user journey testing\n- Data pipeline validation\n- Performance and reliability testing\n- Cross-browser compatibility\n- Multi-device testing simulation\n- Automated workflow execution\n- Real-time progress monitoring\n\n**Usage**:\n```bash\n# Open in browser:\nopen tests/e2e-test-suite.html\n# Configure environment and run workflows\n```\n\n### ✅ **5. System Health Monitor**\n**File**: `/tests/system-health-monitor.php`\n\n**Features**:\n- Comprehensive system health checks\n- Database performance monitoring\n- API endpoint status verification\n- File system health validation\n- Resource usage tracking\n- Security status checking\n- Automated alerting capability\n\n**Usage**:\n```bash\n# Run health check:\nphp tests/system-health-monitor.php\n\n# Enable email alerts:\nphp tests/system-health-monitor.php --email admin@yoursite.com\n\n# Custom log file:\nphp tests/system-health-monitor.php --log /path/to/health.log\n```\n\n### ✅ **6. Quick Diagnostic Tool**\n**File**: `/tests/quick-diagnostic.php`\n\n**Features**:\n- Fast 30-second system validation\n- Critical issue identification\n- Web and CLI interfaces\n- Immediate troubleshooting recommendations\n- Essential connectivity tests\n\n**Usage**:\n```bash\n# Command line:\nphp tests/quick-diagnostic.php\n\n# Web interface:\nhttps://yoursite.com/tests/quick-diagnostic.php?run=1\n```\n\n### ✅ **7. Automated Test Runner**\n**File**: `/tests/run-all-tests.sh`\n\n**Features**:\n- Orchestrates all test suites\n- Configurable test depth and scope\n- HTML report generation\n- Command-line options and flexibility\n- Comprehensive result aggregation\n\n**Usage**:\n```bash\n# Run all tests:\n./tests/run-all-tests.sh\n\n# Test production site:\n./tests/run-all-tests.sh -u https://yoursite.com\n\n# Quick validation:\n./tests/run-all-tests.sh --quick\n\n# Generate and open report:\n./tests/run-all-tests.sh --report --open\n```\n\n### ✅ **8. SiteGround Deployment Guide**\n**File**: `/SITEGROUND_DEPLOYMENT_GUIDE.md`\n\n**Features**:\n- Step-by-step deployment instructions\n- Database setup procedures\n- File upload and configuration guidance\n- Performance optimization tips\n- Security hardening recommendations\n- Troubleshooting solutions\n\n---\n\n## 🚀 Quick Start Testing Guide\n\n### **Phase 1: Pre-Deployment Testing**\n```bash\n# 1. Quick system check\nphp tests/quick-diagnostic.php\n\n# 2. Database validation\nphp tests/database-integration-tests.php\n\n# 3. Backend API tests\nphp tests/backend-api-tests.php http://localhost\n```\n\n### **Phase 2: Post-Deployment Testing**\n```bash\n# 1. Update base URL and run full suite\n./tests/run-all-tests.sh -u https://yoursite.com --report\n\n# 2. Frontend validation (open in browser)\nopen https://yoursite.com/tests/frontend-integration-tests.html\n\n# 3. E2E workflow testing (open in browser)\nopen https://yoursite.com/tests/e2e-test-suite.html\n```\n\n### **Phase 3: Ongoing Monitoring**\n```bash\n# Daily health check (can be automated via cron)\nphp tests/system-health-monitor.php --email admin@yoursite.com\n\n# Weekly full validation\n./tests/run-all-tests.sh -u https://yoursite.com --depth full\n```\n\n---\n\n## 📊 Test Coverage Matrix\n\n| Component | Unit Tests | Integration Tests | E2E Tests | Performance Tests | Security Tests |\n|-----------|------------|-------------------|-----------|-------------------|----------------|\n| **Frontend** | ✅ | ✅ | ✅ | ✅ | ✅ |\n| **Backend API** | ✅ | ✅ | ✅ | ✅ | ✅ |\n| **Database** | ✅ | ✅ | ✅ | ✅ | ✅ |\n| **Search System** | ✅ | ✅ | ✅ | ✅ | - |\n| **Data Pipeline** | ✅ | ✅ | ✅ | - | - |\n| **User Interface** | ✅ | ✅ | ✅ | ✅ | - |\n\n---\n\n## 🎯 Test Scenarios Covered\n\n### **Frontend Testing**\n- ✅ Page load and component initialization\n- ✅ Search input and results display\n- ✅ Category pill generation and selection\n- ✅ Episode length filtering\n- ✅ Modal opening and closing\n- ✅ Favorites management\n- ✅ Mobile responsive behavior\n- ✅ Error handling and recovery\n\n### **Backend Testing**\n- ✅ Database connectivity and schema validation\n- ✅ API endpoint functionality (GET, POST, PUT, DELETE)\n- ✅ Search and filtering logic\n- ✅ Pagination and sorting\n- ✅ Data validation and sanitization\n- ✅ Error responses and status codes\n- ✅ Performance under load\n- ✅ Security vulnerability scanning\n\n### **Integration Testing**\n- ✅ CSV import to database pipeline\n- ✅ Database to JS export process\n- ✅ Frontend to backend API communication\n- ✅ Full-text search functionality\n- ✅ Data integrity across operations\n- ✅ Session and state management\n\n### **User Journey Testing**\n- ✅ New visitor experience\n- ✅ Search and discovery workflow\n- ✅ Podcast detail viewing\n- ✅ Favorites management\n- ✅ Mobile user experience\n- ✅ Error recovery scenarios\n\n---\n\n## 🔧 Configuration Options\n\n### **Environment Configuration**\n```bash\n# Development testing\nBASE_URL=\"http://localhost\"\nTEST_DEPTH=\"full\"\nBROWSER_MODE=\"desktop\"\n\n# Staging testing\nBASE_URL=\"https://staging.yoursite.com\"\nTEST_DEPTH=\"regression\"\nBROWSER_MODE=\"mobile\"\n\n# Production testing\nBASE_URL=\"https://yoursite.com\"\nTEST_DEPTH=\"smoke\"\nBROWSER_MODE=\"cross-browser\"\n```\n\n### **Monitoring Configuration**\n```php\n// Health monitor settings\n$config = [\n    'max_response_time' => 3000,\n    'max_db_query_time' => 1000,\n    'min_available_space' => 100,\n    'enable_email_alerts' => true,\n    'alert_email' => 'admin@yoursite.com'\n];\n```\n\n---\n\n## 📈 Performance Benchmarks\n\n### **Expected Performance Metrics**\n- **Page Load Time**: < 3 seconds\n- **API Response Time**: < 1 second\n- **Search Response**: < 2 seconds\n- **Database Query Time**: < 500ms\n- **Memory Usage**: < 50MB\n- **Success Rate**: > 95%\n\n### **Performance Testing**\nAll test suites include performance validation:\n- Response time measurement\n- Memory usage tracking\n- Resource utilization monitoring\n- Concurrent connection testing\n- Load simulation capabilities\n\n---\n\n## 🚨 Troubleshooting Quick Reference\n\n### **Common Issues & Solutions**\n\n| Issue | Diagnostic Command | Solution |\n|-------|-------------------|----------|\n| Database connection failed | `php tests/quick-diagnostic.php` | Check credentials in `database.php` |\n| API endpoints not responding | `php tests/backend-api-tests.php` | Verify file uploads and permissions |\n| Search not working | `php tests/database-integration-tests.php` | Check full-text search index |\n| Frontend not loading data | Open browser dev tools | Verify `podcasts-data.js` generation |\n| Performance issues | `php tests/system-health-monitor.php` | Review performance metrics |\n\n### **Emergency Response**\n```bash\n# Quick system validation\nphp tests/quick-diagnostic.php\n\n# If critical issues found:\n# 1. Check database connectivity\n# 2. Verify file permissions\n# 3. Review error logs\n# 4. Test API endpoints manually\n# 5. Regenerate data files if needed\n```\n\n---\n\n## 📞 Support & Maintenance\n\n### **Regular Maintenance Schedule**\n- **Daily**: Quick diagnostic check\n- **Weekly**: Full test suite execution\n- **Monthly**: Performance analysis and optimization\n- **Quarterly**: Security audit and dependency updates\n\n### **Automated Monitoring**\nSet up cron jobs for automated monitoring:\n```bash\n# Daily health check at 2 AM\n0 2 * * * /path/to/php /path/to/tests/system-health-monitor.php --email admin@yoursite.com\n\n# Weekly full test at Sunday 3 AM\n0 3 * * 0 /path/to/tests/run-all-tests.sh -u https://yoursite.com --depth regression\n```\n\n### **Log Monitoring**\nMonitor these log files regularly:\n- `/tests/health_monitor.log` - System health logs\n- `/logs/error_log` - PHP error logs\n- `/tests/reports/` - Test execution reports\n\n---\n\n## 🎉 Success Criteria\n\n### **Deployment Success**\n- ✅ All automated tests pass (>95% success rate)\n- ✅ Page loads in <3 seconds\n- ✅ Search functionality works correctly\n- ✅ Database connectivity confirmed\n- ✅ API endpoints respond properly\n- ✅ Mobile responsive design validated\n\n### **Production Readiness**\n- ✅ Security checks pass\n- ✅ Performance benchmarks met\n- ✅ Error handling functional\n- ✅ Monitoring systems active\n- ✅ Backup procedures in place\n- ✅ Documentation complete\n\n---\n\n## 📚 Additional Resources\n\n### **Files Reference**\n```\ntests/\n├── frontend-integration-tests.html    # Interactive frontend testing\n├── backend-api-tests.php              # Comprehensive API validation\n├── database-integration-tests.php     # Database and schema testing\n├── e2e-test-suite.html                # End-to-end workflow testing\n├── system-health-monitor.php          # Continuous health monitoring\n├── quick-diagnostic.php               # Fast troubleshooting tool\n├── run-all-tests.sh                   # Automated test orchestration\n└── reports/                           # Generated test reports\n```\n\n### **Documentation**\n- `SITEGROUND_DEPLOYMENT_GUIDE.md` - Complete deployment instructions\n- `TESTING_DEPLOYMENT_SUMMARY.md` - This comprehensive overview\n- Individual test files contain detailed inline documentation\n\n---\n\n## 🏆 Conclusion\n\nThis comprehensive testing and deployment system provides:\n\n🎯 **Complete Coverage**: Every component tested from unit to integration level\n🔄 **Automated Workflows**: One-command execution of entire test suites\n📊 **Detailed Reporting**: HTML reports with metrics and recommendations\n🚨 **Proactive Monitoring**: Continuous health checking with alerts\n🛠️ **Easy Troubleshooting**: Quick diagnostic tools for immediate issue resolution\n📖 **Clear Documentation**: Step-by-step guides for deployment and maintenance\n\nYour Wine Podcast Directory is now equipped with enterprise-grade testing and monitoring capabilities, ensuring reliable operation and easy maintenance on SiteGround hosting platform.\n\n**Ready for Production Deployment! 🚀**","size_bytes":11893},"attached_assets/script_1758189167076.js":{"content":"// Wine Podcast Directory 2025 - Main JavaScript\n\n// Global variables\nlet podcasts = [];\nlet filteredPodcasts = [];\nlet favorites = JSON.parse(localStorage.getItem('winePodcastFavorites')) || [];\nlet notes = JSON.parse(localStorage.getItem('winePodcastNotes')) || {};\n\n// Initialize the application\ndocument.addEventListener('DOMContentLoaded', function() {\n    loadPodcastData();\n    setupEventListeners();\n});\n\n// Load podcast data\nasync function loadPodcastData() {\n    try {\n        console.log('🔄 Starting to load podcast data...');\n\n        // Check if PODCAST_DATA is available\n        if (!PODCAST_DATA) {\n            throw new Error('PODCAST_DATA is not defined');\n        }\n\n        if (!Array.isArray(PODCAST_DATA)) {\n            throw new Error('PODCAST_DATA is not an array');\n        }\n\n        if (PODCAST_DATA.length === 0) {\n            throw new Error('PODCAST_DATA array is empty');\n        }\n\n        console.log(`✅ Found ${PODCAST_DATA.length} podcasts in data`);\n\n        podcasts = PODCAST_DATA || [];\n        filteredPodcasts = [...podcasts];\n\n        console.log('🔄 Populating filters...');\n        populateFilters();\n\n        console.log('🔄 Updating stats...');\n        updateStats();\n\n        console.log('🔄 Rendering podcasts...');\n        updateResultsCount();\n        renderPodcasts(filteredPodcasts);\n\n        console.log('🔄 Loading favorites...');\n        loadFavorites();\n\n        console.log('✅ Data loading completed successfully');\n        hideLoading();\n    } catch (error) {\n        console.error('❌ Error loading podcast data:', error);\n        showError(`Error loading podcast data: ${error.message}`);\n        hideLoading(); // Make sure to hide loading even on error\n    }\n}\n\n// Hide loading spinner\nfunction hideLoading() {\n    const loading = document.getElementById('loadingSpinner');\n    if (loading) loading.style.display = 'none';\n}\n\n// Show error message\nfunction showError(message) {\n    const podcastGrid = document.getElementById('podcastGrid');\n    podcastGrid.innerHTML = `<div class=\"error-message\"><p>${message}</p></div>`;\n    hideLoading();\n}\n\n// Populate simplified filters with unique values from data\nlet selectedCategories = new Set();\n\nfunction populateFilters() {\n    try {\n        const categories = new Set();\n\n        podcasts.forEach((p, index) => {\n            try {\n                if (p.categories && typeof p.categories === 'string') {\n                    p.categories.split(',').forEach(cat => categories.add(cat.trim()));\n                }\n            } catch (err) {\n                console.warn(`Error processing podcast at index ${index}:`, err, p);\n            }\n        });\n\n        populateCategoryPills(Array.from(categories).sort());\n    } catch (error) {\n        console.error('Error in populateFilters:', error);\n        throw error;\n    }\n}\n\n// Create category filter pills\nfunction populateCategoryPills(categories) {\n    const categoryPillsContainer = document.getElementById('categoryPills');\n    if (!categoryPillsContainer) return;\n\n    categoryPillsContainer.innerHTML = '';\n\n    categories.forEach(category => {\n        const pill = document.createElement('button');\n        pill.className = 'category-pill';\n        pill.textContent = category;\n        pill.dataset.category = category;\n\n        pill.addEventListener('click', () => {\n            toggleCategoryPill(pill, category);\n        });\n\n        categoryPillsContainer.appendChild(pill);\n    });\n}\n\n// Toggle category pill selection\nfunction toggleCategoryPill(pill, category) {\n    if (selectedCategories.has(category)) {\n        selectedCategories.delete(category);\n        pill.classList.remove('active');\n    } else {\n        selectedCategories.add(category);\n        pill.classList.add('active');\n    }\n    applyFilters();\n}\n\n// Update statistics in header\nfunction updateStats() {\n    try {\n        document.getElementById('totalPodcasts').textContent = podcasts.length;\n        document.getElementById('activePodcasts').textContent = podcasts.filter(p => p.active === 'Yes').length;\n        document.getElementById('countriesCount').textContent = new Set(podcasts.map(p => p.country).filter(c => c)).size;\n        document.getElementById('languagesCount').textContent = new Set(podcasts.flatMap(p => (p.language && typeof p.language === 'string') ? p.language.split(',').map(l => l.trim()) : [])).size;\n    } catch (error) {\n        console.error('Error in updateStats:', error);\n        throw error;\n    }\n}\n\n// Render podcasts in grid\nfunction renderPodcasts(list) {\n    const podcastGrid = document.getElementById('podcastGrid');\n    podcastGrid.innerHTML = '';\n    \n    if (list.length === 0) {\n        document.getElementById('noResults').style.display = 'block';\n        document.getElementById('resultsCount').textContent = 0;\n        return;\n    } else {\n        document.getElementById('noResults').style.display = 'none';\n    }\n    \n    document.getElementById('resultsCount').textContent = list.length;\n\n    list.forEach(p => {\n        const card = document.createElement('div');\n        card.className = 'podcast-card';\n\n        const categories = p.categories ? p.categories.split(',').map(c => c.trim()).slice(0, 3) : [];\n        const isFavorited = favorites.find(fav => fav.title === p.title);\n\n        card.innerHTML = `\n            <div class=\"podcast-header\">\n                <img src=\"${p.logo || 'https://via.placeholder.com/50x50?text=🍷'}\" alt=\"Logo ${p.title}\" class=\"podcast-logo\" onerror=\"this.src='https://via.placeholder.com/50x50?text=🍷'\" />\n                <h3 class=\"podcast-title\">${p.title}</h3>\n                <p class=\"podcast-host\">${p.host}</p>\n                <div class=\"podcast-actions\">\n                    <button class=\"action-btn favorite-btn ${isFavorited ? 'favorited' : ''}\" title=\"Add to favorites\" data-title=\"${p.title}\">\n                        <i class=\"fas fa-heart\"></i>\n                    </button>\n                    <button class=\"action-btn details-btn\" title=\"View details\" data-title=\"${p.title}\">\n                        <i class=\"fas fa-info-circle\"></i>\n                    </button>\n                    <button class=\"action-btn notes-btn\" title=\"Add notes\" data-title=\"${p.title}\">\n                        <i class=\"fas fa-sticky-note\"></i>\n                    </button>\n                </div>\n            </div>\n            <div class=\"podcast-body\">\n                <div class=\"podcast-meta\">\n                    <div class=\"meta-item\"><i class=\"fas fa-globe\"></i> ${p.country}</div>\n                    <div class=\"meta-item\"><i class=\"fas fa-language\"></i> ${p.language}</div>\n                    <div class=\"meta-item\"><i class=\"fas fa-calendar-alt\"></i> ${p.year || 'N/A'}</div>\n                    <div class=\"meta-item status-${p.active === 'Yes' ? 'active' : p.active === 'On hiatus' ? 'hiatus' : 'inactive'}\">\n                        <i class=\"fas fa-broadcast-tower\"></i> ${p.active}\n                    </div>\n                </div>\n                <p class=\"podcast-description\">${p.description || ''}</p>\n                <div class=\"podcast-categories\">\n                    ${categories.map(cat => `<span class=\"category-tag\">${cat}</span>`).join('')}\n                    ${categories.length > 3 ? '<span class=\"category-tag\">+more</span>' : ''}\n                </div>\n                <div class=\"podcast-platforms\">\n                    ${renderPlatformLinks(p)}\n                </div>\n            </div>\n        `;\n\n        podcastGrid.appendChild(card);\n    });\n\n    attachEventListeners();\n}\n\n// Render platform links\nfunction renderPlatformLinks(p) {\n    const platforms = [\n        { key: 'spotify', icon: 'fab fa-spotify', label: 'Spotify' },\n        { key: 'apple', icon: 'fab fa-apple', label: 'Apple Podcasts' },\n        { key: 'youtube', icon: 'fab fa-youtube', label: 'YouTube' },\n        { key: 'soundcloud', icon: 'fab fa-soundcloud', label: 'SoundCloud' },\n        { key: 'amazon', icon: 'fab fa-amazon', label: 'Amazon' },\n        { key: 'iheart', icon: 'fas fa-heart', label: 'iHeart' }\n    ];\n\n    return platforms.map(pf => {\n        if (p[pf.key] && p[pf.key].trim() !== '') {\n            return `<a href=\"${p[pf.key]}\" target=\"_blank\" class=\"platform-link\" title=\"${pf.label}\"><i class=\"${pf.icon}\"></i></a>`;\n        }\n        return '';\n    }).join('');\n}\n\n// Attach event listeners to dynamic buttons\nfunction attachEventListeners() {\n    document.querySelectorAll('.favorite-btn').forEach(btn => {\n        btn.addEventListener('click', toggleFavorite);\n    });\n    document.querySelectorAll('.details-btn').forEach(btn => {\n        btn.addEventListener('click', showDetails);\n    });\n    document.querySelectorAll('.notes-btn').forEach(btn => {\n        btn.addEventListener('click', showNotes);\n    });\n}\n\n// Setup all event listeners\nfunction setupEventListeners() {\n    // Tab navigation\n    document.querySelectorAll('.tab-btn').forEach(tab => {\n        tab.addEventListener('click', () => {\n            document.querySelectorAll('.tab-btn').forEach(t => t.classList.remove('active'));\n            tab.classList.add('active');\n\n            document.querySelectorAll('.tab-content').forEach(tc => tc.classList.remove('active'));\n            const target = tab.dataset.tab;\n            document.getElementById(target).classList.add('active');\n\n            if (target === 'directory') {\n                updateResultsCount();\n                renderPodcasts(filteredPodcasts);\n            } else if (target === 'favorites') {\n                renderFavorites();\n            }\n        });\n    });\n\n    // Search functionality\n    const searchInput = document.getElementById('searchInput');\n    searchInput.addEventListener('input', debounce(applyFilters, 300));\n\n    document.getElementById('clearSearch').addEventListener('click', () => {\n        searchInput.value = '';\n        applyFilters();\n    });\n\n    // Duration filter\n    const durationFilter = document.getElementById('durationFilter');\n    if (durationFilter) {\n        durationFilter.addEventListener('change', applyFilters);\n    }\n\n    // Category filter clear button\n    const clearCategoriesBtn = document.getElementById('clearCategories');\n    if (clearCategoriesBtn) {\n        clearCategoriesBtn.addEventListener('click', () => {\n            clearCategoryFilters();\n        });\n    }\n\n    // Clear all filters button\n    const clearAllFiltersBtn = document.getElementById('clearAllFilters');\n    if (clearAllFiltersBtn) {\n        clearAllFiltersBtn.addEventListener('click', () => {\n            clearAllFilters();\n        });\n    }\n\n    // Sort functionality\n    document.getElementById('sortBy').addEventListener('change', (e) => {\n        sortPodcasts(e.target.value);\n        updateResultsCount();\n        renderPodcasts(filteredPodcasts);\n    });\n\n    // Modal close buttons\n    document.querySelectorAll('.modal .close').forEach(btn => {\n        btn.addEventListener('click', () => {\n            btn.closest('.modal').style.display = 'none';\n        });\n    });\n\n    window.addEventListener('click', (e) => {\n        if (e.target.classList.contains('modal')) {\n            e.target.style.display = 'none';\n        }\n    });\n\n    // Notes modal\n    document.getElementById('saveNotes').addEventListener('click', saveNotes);\n    document.getElementById('cancelNotes').addEventListener('click', () => {\n        document.getElementById('notesModal').style.display = 'none';\n    });\n}\n\n// Debounce function for search\nfunction debounce(func, wait) {\n    let timeout;\n    return function executedFunction(...args) {\n        const later = () => {\n            clearTimeout(timeout);\n            func(...args);\n        };\n        clearTimeout(timeout);\n        timeout = setTimeout(later, wait);\n    };\n}\n\n// Apply filters\n// Apply simplified filters and search\nfunction applyFilters() {\n    const searchTerm = document.getElementById('searchInput').value.toLowerCase().trim();\n    const durationFilter = document.getElementById('durationFilter').value;\n\n    filteredPodcasts = podcasts.filter(p => {\n        // Text search - improved to handle partial matches\n        if (searchTerm) {\n            const textFields = [\n                p.title || '',\n                p.host || '',\n                p.country || '',\n                p.language || '',\n                p.description || '',\n                p.categories || '',\n                p.audience || ''\n            ].join(' ').toLowerCase();\n\n            if (!textFields.includes(searchTerm)) return false;\n        }\n\n        // Category filter with pills\n        if (selectedCategories.size > 0) {\n            const cats = p.categories ? p.categories.split(',').map(c => c.trim()) : [];\n            if (!Array.from(selectedCategories).some(cat => cats.includes(cat))) {\n                return false;\n            }\n        }\n\n        // Duration filter\n        if (durationFilter && p.duration !== durationFilter) return false;\n\n        return true;\n    });\n\n    updateResultsCount();\n    renderPodcasts(filteredPodcasts);\n}\n\n// Update results count display\nfunction updateResultsCount() {\n    const resultsCountElement = document.getElementById('resultsCount');\n    if (resultsCountElement) {\n        resultsCountElement.textContent = filteredPodcasts.length;\n    }\n}\n\n// Clear category filters\nfunction clearCategoryFilters() {\n    selectedCategories.clear();\n    document.querySelectorAll('.category-pill').forEach(pill => {\n        pill.classList.remove('active');\n    });\n    applyFilters();\n    showNotification('Category filters cleared!');\n}\n\n// Clear all filters\nfunction clearAllFilters() {\n    // Clear search input\n    document.getElementById('searchInput').value = '';\n\n    // Clear duration filter\n    document.getElementById('durationFilter').selectedIndex = 0;\n\n    // Clear category filters\n    clearCategoryFilters();\n\n    // Reset filtered podcasts and render\n    filteredPodcasts = [...podcasts];\n    updateResultsCount();\n    renderPodcasts(filteredPodcasts);\n\n    // Show confirmation message\n    showNotification('All filters cleared! Showing all podcasts.');\n}\n\n// Note: clearMultiSelect function removed as it's no longer needed for simplified interface\n\n// Sort podcasts\nfunction sortPodcasts(criteria) {\n    switch(criteria) {\n        case 'title':\n            filteredPodcasts.sort((a,b) => a.title.localeCompare(b.title));\n            break;\n        case 'title-desc':\n            filteredPodcasts.sort((a,b) => b.title.localeCompare(a.title));\n            break;\n        case 'year':\n            filteredPodcasts.sort((a,b) => (a.year || 0) - (b.year || 0));\n            break;\n        case 'year-desc':\n            filteredPodcasts.sort((a,b) => (b.year || 0) - (a.year || 0));\n            break;\n        case 'episodes':\n            filteredPodcasts.sort((a,b) => (parseInt(a.episodes) || 0) - (parseInt(b.episodes) || 0));\n            break;\n        case 'episodes-desc':\n            filteredPodcasts.sort((a,b) => (parseInt(b.episodes) || 0) - (parseInt(a.episodes) || 0));\n            break;\n        case 'country':\n            filteredPodcasts.sort((a,b) => a.country.localeCompare(b.country));\n            break;\n    }\n}\n\n// Toggle favorite\nfunction toggleFavorite(e) {\n    e.stopPropagation();\n    const title = e.currentTarget.dataset.title;\n    const index = favorites.findIndex(fav => fav.title === title);\n    \n    if (index === -1) {\n        const podcast = podcasts.find(p => p.title === title);\n        if (podcast) {\n            favorites.push(podcast);\n            e.currentTarget.classList.add('favorited');\n        }\n    } else {\n        favorites.splice(index, 1);\n        e.currentTarget.classList.remove('favorited');\n    }\n    \n    saveFavorites();\n    \n    // Update favorites tab if it's active\n    if (document.getElementById('favorites').classList.contains('active')) {\n        renderFavorites();\n    }\n}\n\n// Save favorites to localStorage\nfunction saveFavorites() {\n    localStorage.setItem('winePodcastFavorites', JSON.stringify(favorites));\n}\n\n// Load favorites from localStorage\nfunction loadFavorites() {\n    // Favorites are already loaded in the global variable\n    renderFavorites();\n}\n\n// Render favorites\nfunction renderFavorites() {\n    const favoritesGrid = document.getElementById('favoritesGrid');\n    favoritesGrid.innerHTML = '';\n    \n    if (favorites.length === 0) {\n        favoritesGrid.innerHTML = `\n            <div class=\"empty-favorites\">\n                <i class=\"fas fa-heart-broken\"></i>\n                <h3>No favorites yet</h3>\n                <p>Add podcasts to favorites by clicking the heart icon on podcast cards</p>\n            </div>\n        `;\n        return;\n    }\n    \n    favorites.forEach(p => {\n        const card = document.createElement('div');\n        card.className = 'podcast-card';\n        const categories = p.categories ? p.categories.split(',').map(c => c.trim()).slice(0, 3) : [];\n        \n        card.innerHTML = `\n            <div class=\"podcast-header\">\n                <img src=\"${p.logo || 'https://via.placeholder.com/50x50?text=🍷'}\" alt=\"Logo ${p.title}\" class=\"podcast-logo\" onerror=\"this.src='https://via.placeholder.com/50x50?text=🍷'\" />\n                <h3 class=\"podcast-title\">${p.title}</h3>\n                <p class=\"podcast-host\">${p.host}</p>\n                <div class=\"podcast-actions\">\n                    <button class=\"action-btn favorite-btn favorited\" title=\"Remove from favorites\" data-title=\"${p.title}\">\n                        <i class=\"fas fa-heart\"></i>\n                    </button>\n                    <button class=\"action-btn details-btn\" title=\"View details\" data-title=\"${p.title}\">\n                        <i class=\"fas fa-info-circle\"></i>\n                    </button>\n                    <button class=\"action-btn notes-btn\" title=\"Add notes\" data-title=\"${p.title}\">\n                        <i class=\"fas fa-sticky-note\"></i>\n                    </button>\n                </div>\n            </div>\n            <div class=\"podcast-body\">\n                <div class=\"podcast-meta\">\n                    <div class=\"meta-item\"><i class=\"fas fa-globe\"></i> ${p.country}</div>\n                    <div class=\"meta-item\"><i class=\"fas fa-language\"></i> ${p.language}</div>\n                    <div class=\"meta-item\"><i class=\"fas fa-calendar-alt\"></i> ${p.year || 'N/A'}</div>\n                    <div class=\"meta-item status-${p.active === 'Yes' ? 'active' : p.active === 'On hiatus' ? 'hiatus' : 'inactive'}\">\n                        <i class=\"fas fa-broadcast-tower\"></i> ${p.active}\n                    </div>\n                </div>\n                <p class=\"podcast-description\">${p.description || ''}</p>\n                <div class=\"podcast-categories\">\n                    ${categories.map(cat => `<span class=\"category-tag\">${cat}</span>`).join('')}\n                </div>\n                <div class=\"podcast-platforms\">\n                    ${renderPlatformLinks(p)}\n                </div>\n            </div>\n        `;\n        favoritesGrid.appendChild(card);\n    });\n    \n    attachEventListeners();\n}\n\n// Show podcast details in modal\nfunction showDetails(e) {\n    e.stopPropagation();\n    const title = e.currentTarget.dataset.title;\n    const podcast = podcasts.find(p => p.title === title);\n    if (!podcast) return;\n\n    const modalContent = document.getElementById('modalContent');\n    modalContent.innerHTML = `\n        <h2>${podcast.title}</h2>\n        <div class=\"modal-podcast-info\">\n            <p><strong>Host:</strong> ${podcast.host}</p>\n            <p><strong>Country:</strong> ${podcast.country}</p>\n            <p><strong>Language:</strong> ${podcast.language}</p>\n            <p><strong>Launch Year:</strong> ${podcast.year || 'N/A'}</p>\n            <p><strong>Status:</strong> <span class=\"status-${podcast.active === 'Yes' ? 'active' : podcast.active === 'On hiatus' ? 'hiatus' : 'inactive'}\">${podcast.active}</span></p>\n            <p><strong>Categories:</strong> ${podcast.categories}</p>\n            <p><strong>Target Audience:</strong> ${podcast.audience}</p>\n            <p><strong>Episode Length:</strong> ${podcast.duration}</p>\n            <p><strong>Publishing Frequency:</strong> ${podcast.frequency}</p>\n            <p><strong>Episodes Published:</strong> ${podcast.episodes || 'N/A'}</p>\n            <p><strong>Description:</strong> ${podcast.description}</p>\n            ${podcast.email ? `<p><strong>Email:</strong> <a href=\"mailto:${podcast.email}\">${podcast.email}</a></p>` : ''}\n            ${podcast.website ? `<p><strong>Website:</strong> <a href=\"${podcast.website}\" target=\"_blank\">${podcast.website}</a></p>` : ''}\n            ${podcast.sampleEpisode ? `<p><strong>Sample Episode:</strong> <a href=\"${podcast.sampleEpisode}\" target=\"_blank\">Listen</a></p>` : ''}\n        </div>\n        <div class=\"modal-platforms\">\n            <h3>Listen On:</h3>\n            <div class=\"podcast-platforms\">\n                ${renderPlatformLinks(podcast)}\n            </div>\n        </div>\n    `;\n\n    document.getElementById('podcastModal').style.display = 'block';\n}\n\n// Show notes modal\nfunction showNotes(e) {\n    e.stopPropagation();\n    const title = e.currentTarget.dataset.title;\n    const currentNotes = notes[title] || '';\n    \n    document.getElementById('notesTextarea').value = currentNotes;\n    document.getElementById('notesModal').style.display = 'block';\n    document.getElementById('notesModal').dataset.podcastTitle = title;\n}\n\n// Save notes\nfunction saveNotes() {\n    const title = document.getElementById('notesModal').dataset.podcastTitle;\n    const noteText = document.getElementById('notesTextarea').value;\n\n    if (noteText.trim()) {\n        notes[title] = noteText;\n    } else {\n        delete notes[title];\n    }\n\n    localStorage.setItem('winePodcastNotes', JSON.stringify(notes));\n    document.getElementById('notesModal').style.display = 'none';\n}\n\n// Show notification message\nfunction showNotification(message, type = 'info') {\n    // Remove existing notification if any\n    const existingNotification = document.querySelector('.notification');\n    if (existingNotification) {\n        existingNotification.remove();\n    }\n\n    // Create notification element\n    const notification = document.createElement('div');\n    notification.className = `notification notification-${type}`;\n    notification.innerHTML = `\n        <div class=\"notification-content\">\n            <i class=\"fas fa-info-circle\"></i>\n            <span>${message}</span>\n        </div>\n    `;\n\n    // Add to page\n    document.body.appendChild(notification);\n\n    // Show animation\n    setTimeout(() => notification.classList.add('show'), 100);\n\n    // Auto remove after 3 seconds\n    setTimeout(() => {\n        notification.classList.remove('show');\n        setTimeout(() => notification.remove(), 300);\n    }, 3000);\n}\n","size_bytes":22805},"attached_assets/styles_1758189167076.css":{"content":"/* Reset and Base Styles */\n* {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box;\n}\n\nbody {\n    font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;\n    line-height: 1.6;\n    color: #333;\n    background-color: #f8f9fa;\n}\n\n.container {\n    max-width: 1400px;\n    margin: 0 auto;\n    padding: 0 20px;\n}\n\n/* Header */\n.header {\n    background: linear-gradient(135deg, #722f37 0%, #8b1538 100%);\n    color: white;\n    padding: 2rem 0;\n    box-shadow: 0 4px 6px rgba(0,0,0,0.1);\n}\n\n.header-content h1 {\n    font-size: 2.5rem;\n    margin-bottom: 0.5rem;\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n}\n\n.header-content h1 i {\n    color: white;\n}\n\n.subtitle {\n    font-size: 1.1rem;\n    opacity: 0.9;\n    margin-bottom: 2rem;\n}\n\n.header-stats {\n    display: grid;\n    grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));\n    gap: 1.5rem;\n    margin-top: 2rem;\n}\n\n.stat-item {\n    text-align: center;\n    background: rgba(255,255,255,0.1);\n    padding: 1rem;\n    border-radius: 10px;\n    backdrop-filter: blur(10px);\n}\n\n.stat-number {\n    display: block;\n    font-size: 2rem;\n    font-weight: bold;\n    color: white;\n}\n\n.stat-label {\n    font-size: 0.9rem;\n    opacity: 0.8;\n}\n\n/* Navigation Tabs */\n.nav-tabs {\n    background: white;\n    border-bottom: 1px solid #e9ecef;\n    position: sticky;\n    top: 0;\n    z-index: 100;\n}\n\n.nav-tabs .container {\n    display: flex;\n    gap: 0;\n}\n\n.tab-btn {\n    background: none;\n    border: none;\n    padding: 1rem 2rem;\n    cursor: pointer;\n    font-size: 1rem;\n    color: #666;\n    border-bottom: 3px solid transparent;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.tab-btn:hover {\n    background-color: #f8f9fa;\n    color: #722f37;\n}\n\n.tab-btn.active {\n    color: #722f37;\n    border-bottom-color: #722f37;\n    background-color: #f8f9fa;\n}\n\n/* Main Content */\n.main {\n    padding: 2rem 0;\n}\n\n.tab-content {\n    display: none;\n}\n\n.tab-content.active {\n    display: block;\n}\n\n/* Compact Search Section */\n.search-section {\n    background: white;\n    padding: 1.25rem;\n    border-radius: 12px;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.08);\n    margin-bottom: 1.5rem;\n    display: flex;\n    flex-direction: column;\n    gap: 1rem;\n}\n\n/* Compact Search Bar with Inline Filters */\n.compact-search-bar {\n    display: flex;\n    gap: 1rem;\n    align-items: center;\n    flex-wrap: wrap;\n}\n\n.search-input-group {\n    position: relative;\n    flex: 1;\n    min-width: 300px;\n}\n\n.search-input-group i {\n    position: absolute;\n    left: 1rem;\n    top: 50%;\n    transform: translateY(-50%);\n    color: #666;\n    z-index: 2;\n}\n\n#searchInput {\n    width: 100%;\n    padding: 0.875rem 3rem 0.875rem 3rem;\n    border: 2px solid #e9ecef;\n    border-radius: 8px;\n    font-size: 1rem;\n    transition: border-color 0.3s ease;\n}\n\n#searchInput:focus {\n    outline: none;\n    border-color: #722f37;\n    box-shadow: 0 0 0 3px rgba(114, 47, 55, 0.1);\n}\n\n.clear-btn {\n    position: absolute;\n    right: 0.75rem;\n    top: 50%;\n    transform: translateY(-50%);\n    background: none;\n    border: none;\n    color: #666;\n    cursor: pointer;\n    padding: 0.5rem;\n    border-radius: 4px;\n    transition: background-color 0.3s ease;\n    z-index: 2;\n}\n\n.clear-btn:hover {\n    background-color: #f8f9fa;\n    color: #722f37;\n}\n\n/* Inline Duration Filter */\n.inline-filter {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n    white-space: nowrap;\n}\n\n.inline-filter label {\n    font-weight: 500;\n    color: #666;\n    font-size: 0.9rem;\n}\n\n.inline-filter select {\n    padding: 0.5rem 0.75rem;\n    border: 2px solid #e9ecef;\n    border-radius: 6px;\n    font-size: 0.9rem;\n    background: white;\n    cursor: pointer;\n    transition: border-color 0.3s ease;\n}\n\n.inline-filter select:focus {\n    outline: none;\n    border-color: #722f37;\n}\n\n/* Category Filters */\n.category-filters {\n    display: flex;\n    align-items: center;\n    gap: 0.75rem;\n    flex-wrap: wrap;\n}\n\n.filter-label {\n    font-weight: 500;\n    color: #666;\n    font-size: 0.9rem;\n    white-space: nowrap;\n}\n\n.category-pills {\n    display: flex;\n    gap: 0.5rem;\n    flex-wrap: wrap;\n    align-items: center;\n}\n\n.category-pill {\n    background: #f8f9fa;\n    border: 1px solid #e9ecef;\n    padding: 0.4rem 0.875rem;\n    border-radius: 20px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-size: 0.85rem;\n    color: #333;\n    white-space: nowrap;\n}\n\n.category-pill:hover {\n    background: #e9ecef;\n    border-color: #dee2e6;\n    transform: translateY(-1px);\n}\n\n.category-pill.active {\n    background: #722f37;\n    color: white;\n    border-color: #722f37;\n    box-shadow: 0 2px 4px rgba(114, 47, 55, 0.2);\n}\n\n.clear-categories-btn {\n    background: none;\n    border: 1px solid #dc3545;\n    color: #dc3545;\n    padding: 0.3rem 0.75rem;\n    border-radius: 15px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-size: 0.8rem;\n    white-space: nowrap;\n}\n\n.clear-categories-btn:hover {\n    background: #dc3545;\n    color: white;\n}\n\n/* Search Results Info */\n.search-results-info {\n    display: flex;\n    justify-content: space-between;\n    align-items: center;\n    flex-wrap: wrap;\n    gap: 1rem;\n    padding-top: 0.75rem;\n    border-top: 1px solid #e9ecef;\n}\n\n.results-count {\n    font-weight: 500;\n    color: #666;\n    font-size: 0.9rem;\n}\n\n.results-count span {\n    color: #722f37;\n    font-weight: 600;\n}\n\n.clear-all-btn {\n    background: none;\n    border: 1px solid #6c757d;\n    color: #6c757d;\n    padding: 0.4rem 1rem;\n    border-radius: 6px;\n    cursor: pointer;\n    transition: all 0.3s ease;\n    font-size: 0.85rem;\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.clear-all-btn:hover {\n    background: #6c757d;\n    color: white;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .compact-search-bar {\n        flex-direction: column;\n        align-items: stretch;\n    }\n\n    .search-input-group {\n        min-width: unset;\n    }\n\n    .inline-filter {\n        justify-content: space-between;\n    }\n\n    .category-filters {\n        flex-direction: column;\n        align-items: stretch;\n        gap: 0.5rem;\n    }\n\n    .category-pills {\n        justify-content: flex-start;\n    }\n\n    .search-results-info {\n        flex-direction: column;\n        align-items: stretch;\n        text-align: center;\n    }\n\n    .header-stats {\n        grid-template-columns: repeat(2, 1fr);\n    }\n\n    .header-content h1 {\n        font-size: 2rem;\n    }\n}\n\n@media (max-width: 480px) {\n    .container {\n        padding: 0 15px;\n    }\n\n    .search-section {\n        padding: 1rem;\n    }\n\n    .category-pill {\n        font-size: 0.8rem;\n        padding: 0.3rem 0.75rem;\n    }\n\n    .header-stats {\n        grid-template-columns: 1fr;\n        gap: 1rem;\n    }\n\n    .header-content h1 {\n        font-size: 1.75rem;\n        flex-direction: column;\n        text-align: center;\n    }\n\n    .nav-tabs .container {\n        flex-direction: column;\n    }\n\n    .tab-btn {\n        justify-content: center;\n        border-bottom: none;\n        border-left: 3px solid transparent;\n    }\n\n    .tab-btn.active {\n        border-left-color: #722f37;\n        border-bottom-color: transparent;\n    }\n}\n\n/* Notification Styles */\n.notification {\n    position: fixed;\n    top: 20px;\n    right: 20px;\n    background: #722f37;\n    color: white;\n    padding: 1rem 1.5rem;\n    border-radius: 8px;\n    box-shadow: 0 4px 12px rgba(0,0,0,0.15);\n    z-index: 10000;\n    opacity: 0;\n    transform: translateX(100%);\n    transition: all 0.3s ease;\n}\n\n.notification.show {\n    opacity: 1;\n    transform: translateX(0);\n}\n\n.notification-content {\n    display: flex;\n    align-items: center;\n    gap: 0.5rem;\n}\n\n.notification-content i {\n    font-size: 1.1rem;\n}\n\n.notification-info {\n    background: #722f37;\n}\n\n.notification-success {\n    background: #28a745;\n}\n\n.notification-warning {\n    background: #ffc107;\n    color: #333;\n}\n\n.notification-error {\n    background: #dc3545;\n}\n\n.filter-group select {\n    width: 100%;\n    padding: 0.6rem 0.75rem;\n    border: 1px solid #e9ecef;\n    border-radius: 6px;\n    font-size: 0.9rem;\n    background: white;\n    color: #333;\n    transition: border-color 0.3s ease;\n}\n\n.filter-group select:focus {\n    outline: none;\n    border-color: #722f37;\n}\n\n.filter-group select[multiple] {\n    height: 80px;\n    padding: 0.4rem;\n}\n\n.filter-group select[multiple] option {\n    padding: 0.3rem 0.5rem;\n    margin: 0.1rem 0;\n    border-radius: 3px;\n}\n\n.filter-group select[multiple] option:checked {\n    background: #722f37;\n    color: white;\n}\n\n.filters-actions {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    flex-wrap: wrap;\n    padding-top: 1rem;\n    border-top: 1px solid #f0f0f0;\n}\n\n.btn-primary, .btn-secondary {\n    padding: 0.6rem 1.25rem;\n    border: none;\n    border-radius: 6px;\n    cursor: pointer;\n    font-size: 0.9rem;\n    transition: all 0.3s ease;\n    display: flex;\n    align-items: center;\n    gap: 0.4rem;\n    font-weight: 500;\n}\n\n.btn-primary {\n    background: #722f37;\n    color: white;\n}\n\n.btn-primary:hover {\n    background: #5a252b;\n}\n\n.btn-secondary {\n    background: #6c757d;\n    color: white;\n}\n\n.btn-secondary:hover {\n    background: #545b62;\n}\n\n.results-count {\n    font-weight: 500;\n    color: #666;\n    margin-left: auto;\n    font-size: 0.9rem;\n}\n\n/* Sort Section */\n.sort-section {\n    display: flex;\n    align-items: center;\n    gap: 1rem;\n    margin-bottom: 1.5rem;\n    background: white;\n    padding: 1rem 1.5rem;\n    border-radius: 8px;\n    box-shadow: 0 2px 8px rgba(0,0,0,0.08);\n}\n\n.sort-section label {\n    font-weight: 500;\n    color: #333;\n    font-size: 0.9rem;\n}\n\n.sort-section select {\n    padding: 0.5rem 0.75rem;\n    border: 1px solid #e9ecef;\n    border-radius: 6px;\n    font-size: 0.9rem;\n    background: white;\n    color: #333;\n}\n\n/* Podcast Grid */\n.podcast-grid {\n    display: grid;\n    grid-template-columns: repeat(auto-fill, minmax(320px, 1fr));\n    gap: 1.5rem;\n}\n\n.podcast-card {\n    background: white;\n    border-radius: 12px;\n    box-shadow: 0 3px 12px rgba(0,0,0,0.08);\n    overflow: hidden;\n    transition: transform 0.3s ease, box-shadow 0.3s ease;\n    cursor: pointer;\n}\n\n.podcast-card:hover {\n    transform: translateY(-3px);\n    box-shadow: 0 6px 20px rgba(0,0,0,0.12);\n}\n\n.podcast-header {\n    position: relative;\n    padding: 1.25rem;\n    background: linear-gradient(135deg, #722f37 0%, #8b1538 100%);\n    color: white;\n}\n\n.podcast-logo {\n    width: 50px;\n    height: 50px;\n    border-radius: 8px;\n    object-fit: cover;\n    margin-bottom: 0.875rem;\n    border: 2px solid rgba(255,255,255,0.2);\n}\n\n.podcast-title {\n    font-size: 1.2rem;\n    font-weight: bold;\n    margin-bottom: 0.4rem;\n    line-height: 1.3;\n}\n\n.podcast-host {\n    opacity: 0.9;\n    font-size: 0.9rem;\n}\n\n.podcast-actions {\n    position: absolute;\n    top: 1rem;\n    right: 1rem;\n    display: flex;\n    gap: 0.4rem;\n}\n\n.action-btn {\n    background: rgba(255,255,255,0.2);\n    border: none;\n    color: white;\n    padding: 0.4rem;\n    border-radius: 6px;\n    cursor: pointer;\n    transition: background-color 0.3s ease;\n    font-size: 0.9rem;\n}\n\n.action-btn:hover {\n    background: rgba(255,255,255,0.3);\n}\n\n.action-btn.favorited {\n    background: #dc3545;\n}\n\n.podcast-body {\n    padding: 1.25rem;\n}\n\n.podcast-meta {\n    display: grid;\n    grid-template-columns: 1fr 1fr;\n    gap: 0.75rem;\n    margin-bottom: 1rem;\n    font-size: 0.85rem;\n}\n\n.meta-item {\n    display: flex;\n    align-items: center;\n    gap: 0.4rem;\n    color: #666;\n}\n\n.meta-item i {\n    color: #722f37;\n    width: 14px;\n    font-size: 0.8rem;\n}\n\n.podcast-description {\n    color: #666;\n    line-height: 1.5;\n    margin-bottom: 1rem;\n    display: -webkit-box;\n    -webkit-line-clamp: 3;\n    -webkit-box-orient: vertical;\n    overflow: hidden;\n    font-size: 0.9rem;\n}\n\n.podcast-categories {\n    display: flex;\n    flex-wrap: wrap;\n    gap: 0.4rem;\n    margin-bottom: 1rem;\n}\n\n.category-tag {\n    background: #f8f9fa;\n    color: #722f37;\n    padding: 0.2rem 0.6rem;\n    border-radius: 4px;\n    font-size: 0.75rem;\n    border: 1px solid #e9ecef;\n    font-weight: 500;\n}\n\n.podcast-platforms {\n    display: flex;\n    gap: 0.4rem;\n    flex-wrap: wrap;\n}\n\n.platform-link {\n    display: inline-flex;\n    align-items: center;\n    justify-content: center;\n    width: 32px;\n    height: 32px;\n    background: #f8f9fa;\n    color: #333;\n    text-decoration: none;\n    border-radius: 6px;\n    font-size: 0.9rem;\n    transition: all 0.3s ease;\n    border: 1px solid #e9ecef;\n}\n\n.platform-link:hover {\n    background: #722f37;\n    color: white;\n    border-color: #722f37;\n}\n\n/* Status Indicators */\n.status-active {\n    color: #28a745;\n}\n\n.status-hiatus {\n    color: #ffc107;\n}\n\n.status-inactive {\n    color: #dc3545;\n}\n\n/* Loading & Empty States */\n.loading {\n    text-align: center;\n    padding: 3rem;\n    color: #666;\n    font-size: 1.1rem;\n}\n\n.loading i {\n    font-size: 1.5rem;\n    margin-bottom: 1rem;\n    display: block;\n}\n\n.no-results {\n    text-align: center;\n    padding: 3rem;\n    color: #666;\n}\n\n.no-results i {\n    font-size: 2.5rem;\n    margin-bottom: 1rem;\n    color: #ccc;\n}\n\n.empty-favorites {\n    text-align: center;\n    padding: 3rem;\n    color: #666;\n    grid-column: 1 / -1;\n}\n\n.empty-favorites i {\n    font-size: 2.5rem;\n    margin-bottom: 1rem;\n    color: #ccc;\n}\n\n/* Modal */\n.modal {\n    display: none;\n    position: fixed;\n    z-index: 1000;\n    left: 0;\n    top: 0;\n    width: 100%;\n    height: 100%;\n    background-color: rgba(0,0,0,0.5);\n    backdrop-filter: blur(5px);\n}\n\n.modal-content {\n    background-color: white;\n    margin: 5% auto;\n    padding: 2rem;\n    border-radius: 12px;\n    width: 90%;\n    max-width: 700px;\n    max-height: 80vh;\n    overflow-y: auto;\n    position: relative;\n}\n\n.close {\n    position: absolute;\n    right: 1rem;\n    top: 1rem;\n    color: #aaa;\n    font-size: 24px;\n    font-weight: bold;\n    cursor: pointer;\n    z-index: 1001;\n}\n\n.close:hover {\n    color: #000;\n}\n\n.modal-actions {\n    display: flex;\n    gap: 1rem;\n    margin-top: 1rem;\n    justify-content: flex-end;\n}\n\n#notesTextarea {\n    width: 100%;\n    height: 120px;\n    padding: 1rem;\n    border: 1px solid #e9ecef;\n    border-radius: 8px;\n    resize: vertical;\n    font-family: inherit;\n    margin-bottom: 1rem;\n    font-size: 0.9rem;\n}\n\n/* Responsive Design */\n@media (max-width: 768px) {\n    .container {\n        padding: 0 15px;\n    }\n    \n    .header-content h1 {\n        font-size: 2rem;\n    }\n    \n    .nav-tabs .container {\n        flex-wrap: wrap;\n    }\n    \n    .tab-btn {\n        flex: 1;\n        min-width: 120px;\n        text-align: center;\n        padding: 0.75rem 0.5rem;\n        font-size: 0.9rem;\n    }\n    \n    .filters-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .podcast-grid {\n        grid-template-columns: 1fr;\n    }\n    \n    .modal-content {\n        width: 95%;\n        margin: 10% auto;\n        padding: 1.5rem;\n    }\n    \n    .search-section,\n    .filters-section,\n    .sort-section {\n        padding: 1rem;\n    }\n}\n\n@media (max-width: 480px) {\n    .header-stats {\n        grid-template-columns: repeat(2, 1fr);\n    }\n    \n    .quick-search {\n        flex-direction: column;\n        align-items: flex-start;\n    }\n    \n    .filters-actions {\n        flex-direction: column;\n        align-items: stretch;\n    }\n    \n    .results-count {\n        margin-left: 0;\n        text-align: center;\n    }\n}\n\n/* Animations */\n@keyframes fadeIn {\n    from { opacity: 0; transform: translateY(15px); }\n    to { opacity: 1; transform: translateY(0); }\n}\n\n.podcast-card {\n    animation: fadeIn 0.4s ease-out;\n}\n\n/* Custom Scrollbar */\n::-webkit-scrollbar {\n    width: 6px;\n}\n\n::-webkit-scrollbar-track {\n    background: #f1f1f1;\n    border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb {\n    background: #722f37;\n    border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n    background: #5a252b;\n}\n","size_bytes":15819},"server/db.ts":{"content":"import { Pool, neonConfig } from '@neondatabase/serverless';\nimport { drizzle } from 'drizzle-orm/neon-serverless';\nimport ws from \"ws\";\nimport * as schema from \"@shared/schema\";\n\nneonConfig.webSocketConstructor = ws;\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\n    \"DATABASE_URL must be set. Did you forget to provision a database?\",\n  );\n}\n\nexport const pool = new Pool({ connectionString: process.env.DATABASE_URL });\nexport const db = drizzle({ client: pool, schema });\n","size_bytes":483},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport cors from \"cors\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\nimport { seedAdminUser } from \"./auth\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\n// CORS configuration for WordPress iframe embedding\nconst corsOptions = {\n  origin: function (origin: string | undefined, callback: (err: Error | null, allow?: boolean) => void) {\n    // Allow requests with no origin (mobile apps, Postman, etc.)\n    if (!origin) return callback(null, true);\n    \n    // List of allowed WordPress domains and patterns\n    const allowedOrigins = [\n      // Development origins\n      'http://localhost:3000',\n      'http://localhost:5000',\n      'http://localhost:8080',\n      'https://localhost:3000',\n      'https://localhost:5000',\n      'https://localhost:8080',\n      'http://127.0.0.1:3000',\n      'http://127.0.0.1:5000',\n      'http://127.0.0.1:8080',\n      'https://127.0.0.1:3000',\n      'https://127.0.0.1:5000',\n      'https://127.0.0.1:8080',\n      \n      // Production origins - Add your WordPress domain here\n      // 'https://your-wordpress-site.com',\n      // 'https://www.your-wordpress-site.com',\n    ];\n    \n    // Check for Replit domains (all Replit subdomains) - allow optional ports\n    const isReplitDomain = /^https?:\\/\\/[\\w\\-]+\\.replit\\.dev(:\\d+)?$/.test(origin) || \n                          /^https?:\\/\\/[\\w\\-]+\\.repl\\.co(:\\d+)?$/.test(origin) ||\n                          /^https?:\\/\\/[\\w\\-]+-[\\w\\-]+-[\\w\\-]+-[\\w\\-]+-[\\w\\-]+\\.[\\w\\-]+\\.replit\\.dev(:\\d+)?$/.test(origin) ||\n                          /^https?:\\/\\/[\\w\\-]+\\.replit\\.app(:\\d+)?$/.test(origin);\n    \n    // Check for WordPress.com subdomains\n    const isWordPressSubdomain = /^https?:\\/\\/[\\w\\-]+\\.wordpress\\.com$/.test(origin);\n    \n    // Check for common WordPress hosting patterns\n    const isWordPressHosting = /^https?:\\/\\/[\\w\\-\\.]+\\.(wpengine|kinsta|siteground|godaddy)\\.com$/.test(origin);\n    \n    // For development, also allow test domains\n    const isTestDomain = /^https?:\\/\\/(test|example)\\.[\\w\\-]+\\.com$/.test(origin);\n    \n    // Check if origin is in allowed list or matches WordPress/Replit patterns\n    if (allowedOrigins.includes(origin) || isReplitDomain || isWordPressSubdomain || isWordPressHosting || isTestDomain) {\n      console.log(`CORS: Allowed origin: ${origin}`);\n      callback(null, true);\n    } else {\n      // Log rejected origins for debugging\n      console.log(`CORS: Rejected origin: ${origin}`);\n      callback(new Error('Not allowed by CORS'), false);\n    }\n  },\n  credentials: true, // Enable cookies for authentication\n  optionsSuccessStatus: 200, // For legacy browser support\n  methods: ['GET', 'POST', 'PUT', 'DELETE', 'PATCH', 'OPTIONS'],\n  allowedHeaders: [\n    'Origin', \n    'X-Requested-With', \n    'Content-Type', \n    'Accept', \n    'Authorization', \n    'Cache-Control',\n    'X-Iframe-Context'\n  ],\n  exposedHeaders: ['X-Frame-Options', 'Content-Security-Policy']\n};\n\napp.use(cors(corsOptions));\n\n// Security headers for iframe embedding\napp.use((req: Request, res: Response, next: NextFunction) => {\n  // Check if this is a sensitive route that should not be embedded\n  const isSensitiveRoute = req.path.startsWith('/admin') || \n                          req.path.startsWith('/auth') || \n                          req.path.startsWith('/api/auth');\n  \n  if (isSensitiveRoute) {\n    // Sensitive routes: prevent all iframe embedding\n    res.setHeader('Content-Security-Policy', \"frame-ancestors 'none'\");\n    res.setHeader('X-Frame-Options', 'DENY');\n  } else {\n    // Public routes: allow iframe embedding from WordPress domains (v2.0-2024-09-19)\n    res.setHeader('Content-Security-Policy', \"frame-ancestors 'self' https://*.wordpress.com https://italianwinepodcast.com https://www.italianwinepodcast.com\");\n    // Do not set X-Frame-Options for public routes to avoid CSP conflicts\n  }\n  \n  // Additional security headers (always applied)\n  res.setHeader('X-Content-Type-Options', 'nosniff');\n  res.setHeader('Referrer-Policy', 'strict-origin-when-cross-origin');\n  \n  next();\n});\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  // Production environment variable checks - fail fast if required env vars are missing\n  if (process.env.NODE_ENV === 'production') {\n    const requiredEnvVars = ['SESSION_SECRET', 'DATABASE_URL'];\n    const missingVars = requiredEnvVars.filter(varName => !process.env[varName]);\n    \n    if (missingVars.length > 0) {\n      console.error(`PRODUCTION DEPLOYMENT FAILED: Missing required environment variables: ${missingVars.join(', ')}`);\n      console.error('Please ensure all required environment variables are set before deploying to production.');\n      process.exit(1);\n    }\n    \n    console.log('✓ All required production environment variables are present');\n  }\n\n  const server = await registerRoutes(app);\n  \n  // Seed admin user after routes are set up\n  await seedAdminUser();\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port} - WordPress CSP fix v1.0`);\n  });\n})();\n","size_bytes":6762},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport multer from \"multer\";\nimport csvParser from \"csv-parser\";\nimport { Readable } from \"stream\";\nimport { storage, createDeduplicationKey } from \"./storage\";\nimport { insertPodcastSchema, insertUserNoteSchema, searchFiltersSchema, type InsertPodcast, type Podcast } from \"@shared/schema\";\nimport { setupAuth, isAuthenticated, requireAdmin } from \"./auth\";\nimport { z } from \"zod\";\n\nconst upload = multer({ storage: multer.memoryStorage() });\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Auth middleware setup\n  await setupAuth(app);\n\n  // Note: Auth routes (register, login, logout, user) are now handled in auth.ts\n\n  // Get all podcasts with optional filtering\n  app.get(\"/api/podcasts\", async (req, res) => {\n    try {\n      // Clean up query parameters - convert empty strings to undefined\n      const cleanQuery = (value: any) => {\n        if (typeof value === 'string' && value.trim() === '') return undefined;\n        return value || undefined;\n      };\n\n      const filters = searchFiltersSchema.parse({\n        query: cleanQuery(req.query.query),\n        episodeLength: cleanQuery(req.query.episodeLength),\n        categories: req.query.categories && req.query.categories !== '' \n          ? (Array.isArray(req.query.categories) \n            ? req.query.categories \n            : (req.query.categories as string).split(',').filter(Boolean))\n          : undefined,\n        status: cleanQuery(req.query.status),\n        country: cleanQuery(req.query.country),\n        sortBy: cleanQuery(req.query.sortBy) as any,\n      });\n      \n      const podcasts = await storage.searchPodcasts(filters);\n      res.json(podcasts);\n    } catch (error) {\n      console.error(\"Search parameter error:\", error);\n      res.status(400).json({ message: \"Invalid search parameters\", error: error instanceof Error ? error.message : 'Unknown error' });\n    }\n  });\n\n  // Get single podcast by ID\n  app.get(\"/api/podcasts/:id\", async (req, res) => {\n    try {\n      const podcast = await storage.getPodcastById(req.params.id);\n      if (!podcast) {\n        return res.status(404).json({ message: \"Podcast not found\" });\n      }\n      res.json(podcast);\n    } catch (error) {\n      res.status(500).json({ message: \"Internal server error\", error });\n    }\n  });\n\n  // Create single podcast\n  app.post(\"/api/podcasts\", async (req, res) => {\n    try {\n      const podcastData = insertPodcastSchema.parse(req.body);\n      const podcast = await storage.createPodcast(podcastData);\n      res.status(201).json(podcast);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid podcast data\", error });\n    }\n  });\n\n  // Update single podcast (Admin only)\n  app.patch(\"/api/podcasts/:id\", requireAdmin, async (req: any, res) => {\n    try {\n      const podcastData = insertPodcastSchema.parse(req.body);\n      const updatedPodcast = await storage.updatePodcast(req.params.id, podcastData);\n      \n      if (!updatedPodcast) {\n        return res.status(404).json({ message: \"Podcast not found\" });\n      }\n      \n      res.json(updatedPodcast);\n    } catch (error) {\n      if (error instanceof z.ZodError) {\n        res.status(400).json({ message: \"Invalid podcast data\", errors: error.errors });\n      } else {\n        res.status(500).json({ message: \"Failed to update podcast\", error });\n      }\n    }\n  });\n\n  // Delete single podcast (Admin only)\n  app.delete(\"/api/podcasts/:id\", requireAdmin, async (req: any, res) => {\n    try {\n      const success = await storage.deletePodcast(req.params.id);\n      \n      if (!success) {\n        return res.status(404).json({ message: \"Podcast not found\" });\n      }\n      \n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete podcast\", error });\n    }\n  });\n\n  // CSV Import endpoint (Admin only)\n  app.post(\"/api/podcasts/import\", requireAdmin, upload.single('csvFile'), async (req, res) => {\n    try {\n      if (!req.file) {\n        return res.status(400).json({ message: \"No CSV file provided\" });\n      }\n\n      // Get overwrite flag from query parameters\n      const overwriteDuplicates = req.query.overwrite === 'true';\n\n      const podcasts: InsertPodcast[] = [];\n      const errors: string[] = [];\n      let rowNumber = 0;\n      let headers: string[] = [];\n\n      const stream = Readable.from(req.file.buffer);\n      \n      await new Promise((resolve, reject) => {\n        stream\n          .pipe(csvParser())\n          .on('headers', (headerList) => {\n            headers = headerList;\n            console.log('CSV Headers found:', headers);\n          })\n          .on('data', (row) => {\n            rowNumber++;\n            \n            // Log first few rows for debugging\n            if (rowNumber <= 3) {\n              console.log(`Row ${rowNumber} data:`, row);\n              console.log(`Row ${rowNumber} columns:`, Object.keys(row));\n            }\n            \n            try {\n              // Enhanced column mapping with more flexible matching\n              const getColumnValue = (columnNames: string[]): string | undefined => {\n                for (const colName of columnNames) {\n                  const exactMatch = row[colName];\n                  if (exactMatch !== undefined && exactMatch !== null && String(exactMatch).trim() !== '') {\n                    return String(exactMatch).trim();\n                  }\n                  \n                  // Try case-insensitive match\n                  const caseInsensitiveMatch = Object.keys(row).find(key => \n                    key.toLowerCase() === colName.toLowerCase()\n                  );\n                  if (caseInsensitiveMatch && row[caseInsensitiveMatch] && String(row[caseInsensitiveMatch]).trim() !== '') {\n                    return String(row[caseInsensitiveMatch]).trim();\n                  }\n                }\n                return undefined;\n              };\n\n              // Map CSV columns to podcast schema with flexible matching\n              const title = getColumnValue([\n                'Podcast Title', 'title', 'Title', 'TITLE', 'podcast_title', 'name', 'Name'\n              ]);\n              \n              const host = getColumnValue([\n                'Podcast Host(s)', 'host', 'Host', 'HOST', 'hosts', 'Hosts', 'podcast_host'\n              ]);\n              \n              const country = getColumnValue([\n                'Country of Production', 'country', 'Country', 'COUNTRY', 'nation', 'location'\n              ]) || 'Unknown'; // Default value for missing country\n              \n              const language = getColumnValue([\n                'Primary Language(s) of the Podcast', 'Primary Language(s)', 'language', 'Language', 'LANGUAGE', 'lang', 'languages',\n                'Lingua', 'lingua', 'LINGUA', 'linguaggio', 'Linguaggio', 'idioma', 'idiomas',\n                'Primary Language', 'primary_language', 'main_language', 'podcast_language',\n                'spoken_language', 'audio_language'\n              ]) || 'English'; // Default fallback\n              \n              const yearStr = getColumnValue([\n                'Year Launched', 'year', 'Year', 'YEAR', 'launch_year', 'start_year'\n              ]) || String(new Date().getFullYear()); // Default to current year if missing\n              \n              const status = getColumnValue([\n                'Is the podcast currently active?', 'Is currently active?', 'status', 'Status', 'STATUS', 'active', 'Active'\n              ]) || 'Active';\n              \n              const categoriesStr = getColumnValue([\n                'Categories', 'categories', 'Category', 'category', 'CATEGORIES', 'genre', 'genres'\n              ]) || '';\n              \n              const episodeLength = getColumnValue([\n                'Typical Episode Length', 'Episode Length', 'episodeLength', 'episode_length', 'length', 'duration'\n              ]);\n              \n              const episodes = getColumnValue([\n                'Number of episodes of your podcast published to date', 'Episodes', 'episodes', 'episode_count', 'total_episodes'\n              ]);\n              \n              const description = getColumnValue([\n                'One-sentence description for the directory listing', 'Description', 'description', 'desc', 'about', 'summary'\n              ]);\n              \n              const imageUrl = getColumnValue([\n                'Logo', 'logo', 'LOGO', 'image', 'Image', 'imageUrl', 'image_url', 'podcast_logo'\n              ]);\n\n              // Validate required fields - country and year now have defaults\n              if (!title) {\n                throw new Error(`Missing title. Row data: ${JSON.stringify(row)}`);\n              }\n              if (!host) {\n                throw new Error(`Missing host. Row data: ${JSON.stringify(row)}`);\n              }\n              \n              // Parse year with validation, but use default if invalid\n              let parsedYear = new Date().getFullYear(); // Default year\n              if (yearStr && !isNaN(parseInt(yearStr))) {\n                parsedYear = parseInt(yearStr);\n              }\n\n              const podcastData: InsertPodcast = {\n                title,\n                host,\n                country,\n                language,\n                year: parsedYear,\n                status,\n                categories: categoriesStr.split(',').map((s: string) => s.trim()).filter(Boolean),\n                episodeLength,\n                episodes,\n                description,\n                socialLinks: {\n                  spotify: getColumnValue(['Spotify Link', 'Spotify URL', 'spotify', 'Spotify', 'spotify_url']),\n                  instagram: getColumnValue(['Instagram @', 'Instagram URL', 'instagram', 'Instagram', 'instagram_url']),\n                  youtube: getColumnValue(['YouTube Link', 'YouTube URL', 'youtube', 'Youtube', 'youtube_url']),\n                  website: getColumnValue(['Website', 'Website URL', 'website', 'site', 'url']),\n                },\n                imageUrl,\n              };\n\n              // Validate the data against schema\n              const validatedData = insertPodcastSchema.parse(podcastData);\n              podcasts.push(validatedData);\n              \n            } catch (error) {\n              const errorMsg = error instanceof Error ? error.message : 'Invalid data';\n              errors.push(`Row ${rowNumber}: ${errorMsg}`);\n              console.error(`Row ${rowNumber} error:`, errorMsg, 'Data:', row);\n            }\n          })\n          .on('end', resolve)\n          .on('error', reject);\n      });\n\n      console.log(`Processing complete. Valid podcasts: ${podcasts.length}, Errors: ${errors.length}`);\n      \n      // Check for duplicates before insertion\n      const titleHostPairs = podcasts.map(p => ({ title: p.title, host: p.host }));\n      const existingPodcasts = await storage.findPodcastsByTitleHost(titleHostPairs);\n      \n      // Create a map of existing podcasts by deduplication key\n      const existingMap = new Map<string, string>();\n      existingPodcasts.forEach(podcast => {\n        const key = createDeduplicationKey(podcast.title, podcast.host);\n        existingMap.set(key, podcast.id);\n      });\n      \n      // Separate new podcasts from duplicates\n      const newPodcasts: InsertPodcast[] = [];\n      const duplicatesSkipped: InsertPodcast[] = [];\n      const podcastsToUpdate: Array<{podcast: InsertPodcast, existingId: string}> = [];\n      \n      podcasts.forEach((podcast, index) => {\n        const key = createDeduplicationKey(podcast.title, podcast.host);\n        const existingId = existingMap.get(key);\n        \n        if (existingId) {\n          if (overwriteDuplicates) {\n            podcastsToUpdate.push({ podcast, existingId });\n          } else {\n            duplicatesSkipped.push(podcast);\n          }\n        } else {\n          newPodcasts.push(podcast);\n        }\n      });\n      \n      // Insert new podcasts\n      const createdPodcasts = await storage.bulkCreatePodcasts(newPodcasts);\n      \n      // Update existing podcasts if overwrite is enabled\n      const updatedPodcasts: Podcast[] = [];\n      if (overwriteDuplicates && podcastsToUpdate.length > 0) {\n        for (const { podcast, existingId } of podcastsToUpdate) {\n          // Update each podcast individually\n          const updated = await storage.updatePodcast(existingId, podcast);\n          if (updated) updatedPodcasts.push(updated);\n        }\n      }\n\n      res.json({\n        success: true,\n        imported: createdPodcasts.length,\n        duplicatesSkipped: duplicatesSkipped.length,\n        updated: updatedPodcasts.length,\n        errors: errors.length,\n        errorMessages: errors.slice(0, 20), // Return first 20 errors\n        totalRows: rowNumber,\n        headers: headers,\n        podcasts: createdPodcasts,\n        updatedPodcasts: updatedPodcasts,\n        overwriteMode: overwriteDuplicates\n      });\n    } catch (error) {\n      console.error('CSV import failed:', error);\n      res.status(500).json({ \n        message: \"CSV import failed\", \n        error: error instanceof Error ? error.message : 'Unknown error'\n      });\n    }\n  });\n\n  // User favorites endpoints\n  app.get(\"/api/user/favorites\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const favorites = await storage.getUserFavorites(userId);\n      res.json(favorites);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch favorites\", error });\n    }\n  });\n\n  app.post(\"/api/user/favorites\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const { podcastId } = req.body;\n      \n      if (!podcastId) {\n        return res.status(400).json({ message: \"Podcast ID is required\" });\n      }\n\n      const favorite = await storage.addUserFavorite({\n        userId,\n        podcastId,\n      });\n      res.status(201).json(favorite);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to add favorite\", error });\n    }\n  });\n\n  app.delete(\"/api/user/favorites/:podcastId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const { podcastId } = req.params;\n      \n      await storage.removeUserFavorite(userId, podcastId);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to remove favorite\", error });\n    }\n  });\n\n  // User notes endpoints\n  app.get(\"/api/user/notes\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const notes = await storage.getUserNotes(userId);\n      res.json(notes);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch notes\", error });\n    }\n  });\n\n  app.get(\"/api/user/notes/:podcastId\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const { podcastId } = req.params;\n      \n      const note = await storage.getUserNoteForPodcast(userId, podcastId);\n      if (!note) {\n        return res.status(404).json({ message: \"Note not found\" });\n      }\n      res.json(note);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to fetch note\", error });\n    }\n  });\n\n  app.post(\"/api/user/notes\", isAuthenticated, async (req: any, res) => {\n    try {\n      const userId = (req.user as any).id;\n      const noteData = insertUserNoteSchema.parse({\n        ...req.body,\n        userId,\n      });\n      \n      const note = await storage.createUserNote(noteData);\n      res.status(201).json(note);\n    } catch (error) {\n      res.status(400).json({ message: \"Invalid note data\", error });\n    }\n  });\n\n  app.put(\"/api/user/notes/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      const { note } = req.body;\n      \n      if (!note) {\n        return res.status(400).json({ message: \"Note text is required\" });\n      }\n\n      const updatedNote = await storage.updateUserNote(id, note);\n      res.json(updatedNote);\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to update note\", error });\n    }\n  });\n\n  app.delete(\"/api/user/notes/:id\", isAuthenticated, async (req: any, res) => {\n    try {\n      const { id } = req.params;\n      await storage.deleteUserNote(id);\n      res.status(204).send();\n    } catch (error) {\n      res.status(500).json({ message: \"Failed to delete note\", error });\n    }\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":16541},"server/storage.ts":{"content":"import { \n  type Podcast, \n  type InsertPodcast, \n  type SearchFilters, \n  type User,\n  type UpsertUser,\n  type UserFavorite,\n  type InsertUserFavorite,\n  type UserNote,\n  type InsertUserNote,\n  podcasts,\n  users,\n  userFavorites,\n  userNotes\n} from \"@shared/schema\";\nimport { db } from \"./db\";\nimport { eq, ilike, or, and, inArray, desc, asc, sql } from \"drizzle-orm\";\n\n// Utility function to normalize title and host for duplicate detection\nexport function createDeduplicationKey(title: string, host: string): string {\n  const normalize = (str: string) => {\n    return str\n      .toLowerCase()\n      .trim()\n      // Remove extra spaces\n      .replace(/\\s+/g, ' ')\n      // Remove common punctuation\n      .replace(/[,.!?;:\"'()\\[\\]{}]/g, '')\n      // Remove \"the\", \"a\", \"an\" articles\n      .replace(/^(the|a|an)\\s+/i, '')\n      .trim();\n  };\n  \n  return `${normalize(title)}|||${normalize(host)}`;\n}\n\nexport interface IStorage {\n  // Podcast management\n  createPodcast(podcast: InsertPodcast): Promise<Podcast>;\n  getAllPodcasts(): Promise<Podcast[]>;\n  getPodcastById(id: string): Promise<Podcast | undefined>;\n  searchPodcasts(filters: SearchFilters): Promise<Podcast[]>;\n  bulkCreatePodcasts(podcasts: InsertPodcast[]): Promise<Podcast[]>;\n  findPodcastsByTitleHost(titleHostPairs: Array<{title: string, host: string}>): Promise<Podcast[]>;\n  updatePodcast(id: string, podcast: InsertPodcast): Promise<Podcast | undefined>;\n  deletePodcast(id: string): Promise<boolean>;\n  \n  // User operations (traditional auth)\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  getUserByEmail(email: string): Promise<User | undefined>;\n  createUser(user: Omit<typeof users.$inferInsert, 'id' | 'createdAt' | 'updatedAt'>): Promise<User>;\n  upsertUser(user: UpsertUser): Promise<User>;\n  \n  // User favorites\n  getUserFavorites(userId: string): Promise<UserFavorite[]>;\n  addUserFavorite(favorite: InsertUserFavorite): Promise<UserFavorite>;\n  removeUserFavorite(userId: string, podcastId: string): Promise<void>;\n  \n  // User notes\n  getUserNotes(userId: string): Promise<UserNote[]>;\n  getUserNoteForPodcast(userId: string, podcastId: string): Promise<UserNote | undefined>;\n  createUserNote(note: InsertUserNote): Promise<UserNote>;\n  updateUserNote(id: string, note: string): Promise<UserNote>;\n  deleteUserNote(id: string): Promise<void>;\n}\n\nexport class DatabaseStorage implements IStorage {\n  async createPodcast(insertPodcast: InsertPodcast): Promise<Podcast> {\n    const [podcast] = await db\n      .insert(podcasts)\n      .values(insertPodcast as any)\n      .returning();\n    return podcast;\n  }\n\n  async getAllPodcasts(): Promise<Podcast[]> {\n    return await db.select().from(podcasts);\n  }\n\n  async getPodcastById(id: string): Promise<Podcast | undefined> {\n    const [podcast] = await db.select().from(podcasts).where(eq(podcasts.id, id));\n    return podcast || undefined;\n  }\n\n  async searchPodcasts(filters: SearchFilters): Promise<Podcast[]> {\n    const allPodcasts = await db.select().from(podcasts);\n    let results = allPodcasts;\n\n    // Text search\n    if (filters.query) {\n      const query = filters.query.toLowerCase();\n      results = results.filter(p => \n        p.title.toLowerCase().includes(query) ||\n        p.host.toLowerCase().includes(query) ||\n        p.country.toLowerCase().includes(query) ||\n        p.description?.toLowerCase().includes(query) ||\n        p.categories.some(cat => cat.toLowerCase().includes(query))\n      );\n    }\n\n    // Episode length filter\n    if (filters.episodeLength) {\n      results = results.filter(p => p.episodeLength === filters.episodeLength);\n    }\n\n    // Categories filter\n    if (filters.categories && filters.categories.length > 0) {\n      results = results.filter(p => \n        filters.categories!.some(cat => p.categories.includes(cat))\n      );\n    }\n\n    // Status filter\n    if (filters.status) {\n      results = results.filter(p => p.status === filters.status);\n    }\n\n    // Country filter\n    if (filters.country) {\n      results = results.filter(p => p.country === filters.country);\n    }\n\n    // Sorting\n    if (filters.sortBy) {\n      results.sort((a, b) => {\n        switch (filters.sortBy) {\n          case \"title\":\n            return a.title.localeCompare(b.title);\n          case \"title-desc\":\n            return b.title.localeCompare(a.title);\n          case \"year\":\n            return a.year - b.year;\n          case \"year-desc\":\n            return b.year - a.year;\n          case \"country\":\n            return a.country.localeCompare(b.country);\n          default:\n            return 0;\n        }\n      });\n    }\n\n    return results;\n  }\n\n  async bulkCreatePodcasts(insertPodcasts: InsertPodcast[]): Promise<Podcast[]> {\n    if (insertPodcasts.length === 0) {\n      return [];\n    }\n    \n    return await db\n      .insert(podcasts)\n      .values(insertPodcasts as any)\n      .returning();\n  }\n\n  async findPodcastsByTitleHost(titleHostPairs: Array<{title: string, host: string}>): Promise<Podcast[]> {\n    if (titleHostPairs.length === 0) {\n      return [];\n    }\n\n    // Get all existing podcasts to check against\n    const existingPodcasts = await db.select().from(podcasts);\n    \n    // Create a map of deduplication keys for the input pairs\n    const inputKeys = new Set(\n      titleHostPairs.map(pair => createDeduplicationKey(pair.title, pair.host))\n    );\n    \n    // Filter existing podcasts that match any of the input keys\n    const duplicates = existingPodcasts.filter(podcast => {\n      const existingKey = createDeduplicationKey(podcast.title, podcast.host);\n      return inputKeys.has(existingKey);\n    });\n    \n    return duplicates;\n  }\n\n  async updatePodcast(id: string, insertPodcast: InsertPodcast): Promise<Podcast | undefined> {\n    try {\n      const [podcast] = await db\n        .update(podcasts)\n        .set(insertPodcast as any)\n        .where(eq(podcasts.id, id))\n        .returning();\n      return podcast || undefined;\n    } catch (error) {\n      console.error('Failed to update podcast:', error);\n      return undefined;\n    }\n  }\n\n  async deletePodcast(id: string): Promise<boolean> {\n    try {\n      const result = await db\n        .delete(podcasts)\n        .where(eq(podcasts.id, id));\n      return (result.rowCount ?? 0) > 0;\n    } catch (error) {\n      console.error('Failed to delete podcast:', error);\n      return false;\n    }\n  }\n\n  // User operations (traditional auth)\n  async getUser(id: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.id, id));\n    return user;\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.username, username));\n    return user;\n  }\n\n  async getUserByEmail(email: string): Promise<User | undefined> {\n    const [user] = await db.select().from(users).where(eq(users.email, email));\n    return user;\n  }\n\n  async createUser(userData: Omit<typeof users.$inferInsert, 'id' | 'createdAt' | 'updatedAt'>): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values({\n        ...userData,\n        createdAt: new Date(),\n        updatedAt: new Date(),\n      })\n      .returning();\n    return user;\n  }\n\n  async upsertUser(userData: UpsertUser): Promise<User> {\n    const [user] = await db\n      .insert(users)\n      .values(userData)\n      .onConflictDoUpdate({\n        target: users.id,\n        set: {\n          ...userData,\n          updatedAt: new Date(),\n        },\n      })\n      .returning();\n    return user;\n  }\n\n  // User favorites\n  async getUserFavorites(userId: string): Promise<UserFavorite[]> {\n    return await db.select().from(userFavorites).where(eq(userFavorites.userId, userId));\n  }\n\n  async addUserFavorite(favorite: InsertUserFavorite): Promise<UserFavorite> {\n    const [userFavorite] = await db\n      .insert(userFavorites)\n      .values(favorite)\n      .returning();\n    return userFavorite;\n  }\n\n  async removeUserFavorite(userId: string, podcastId: string): Promise<void> {\n    await db\n      .delete(userFavorites)\n      .where(\n        and(\n          eq(userFavorites.userId, userId),\n          eq(userFavorites.podcastId, podcastId)\n        )\n      );\n  }\n\n  // User notes\n  async getUserNotes(userId: string): Promise<UserNote[]> {\n    return await db.select().from(userNotes).where(eq(userNotes.userId, userId));\n  }\n\n  async getUserNoteForPodcast(userId: string, podcastId: string): Promise<UserNote | undefined> {\n    const [note] = await db\n      .select()\n      .from(userNotes)\n      .where(\n        and(\n          eq(userNotes.userId, userId),\n          eq(userNotes.podcastId, podcastId)\n        )\n      );\n    return note;\n  }\n\n  async createUserNote(noteData: InsertUserNote): Promise<UserNote> {\n    const [note] = await db\n      .insert(userNotes)\n      .values(noteData)\n      .returning();\n    return note;\n  }\n\n  async updateUserNote(id: string, noteText: string): Promise<UserNote> {\n    const [note] = await db\n      .update(userNotes)\n      .set({\n        note: noteText,\n        updatedAt: new Date(),\n      })\n      .where(eq(userNotes.id, id))\n      .returning();\n    return note;\n  }\n\n  async deleteUserNote(id: string): Promise<void> {\n    await db.delete(userNotes).where(eq(userNotes.id, id));\n  }\n}\n\nexport const storage = new DatabaseStorage();\n","size_bytes":9371},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, integer, boolean, jsonb, timestamp, index } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const podcasts = pgTable(\"podcasts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  host: text(\"host\").notNull(),\n  country: text(\"country\").notNull(),\n  language: text(\"language\").notNull(), // Can be comma-separated for multiple languages\n  year: integer(\"year\").notNull(),\n  status: text(\"status\").notNull(), // \"Active\", \"On Hiatus\", \"Ended\"\n  categories: text(\"categories\").array().notNull().default([]),\n  episodeLength: text(\"episode_length\"), // \"Under 10min\", \"10-20min\", \"20-40min\", \"40min+\"\n  episodes: text(\"episodes\"), // \"200+ episodes\", \"45 episodes\", etc.\n  description: text(\"description\"),\n  socialLinks: jsonb(\"social_links\").$type<{\n    spotify?: string;\n    instagram?: string;\n    youtube?: string;\n    website?: string;\n    apple?: string;\n    twitter?: string;\n  }>().default({}),\n  imageUrl: text(\"image_url\"), // Logo/image URL for the podcast\n});\n\n// Favorites functionality removed per user requirements\n\nexport const insertPodcastSchema = createInsertSchema(podcasts).omit({\n  id: true,\n});\n\n// Favorites functionality removed per user requirements\n\nexport type InsertPodcast = z.infer<typeof insertPodcastSchema>;\nexport type Podcast = typeof podcasts.$inferSelect;\n// Favorites functionality removed per user requirements\n\n// Search and filter schemas\nexport const searchFiltersSchema = z.object({\n  query: z.string().optional(),\n  episodeLength: z.string().optional(),\n  categories: z.array(z.string()).optional(),\n  status: z.string().optional(),\n  country: z.string().optional(),\n  sortBy: z.enum([\"title\", \"title-desc\", \"year\", \"year-desc\", \"episodes\", \"episodes-desc\", \"country\"]).optional(),\n});\n\nexport type SearchFilters = z.infer<typeof searchFiltersSchema>;\n\n// Session storage table (required for Replit Auth)\nexport const sessions = pgTable(\n  \"sessions\",\n  {\n    sid: varchar(\"sid\").primaryKey(),\n    sess: jsonb(\"sess\").notNull(),\n    expire: timestamp(\"expire\").notNull(),\n  },\n  (table) => [index(\"IDX_session_expire\").on(table.expire)],\n);\n\n// User storage table (traditional auth)\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: varchar(\"username\").unique().notNull(),\n  password: varchar(\"password\").notNull(),\n  email: varchar(\"email\").unique(),\n  firstName: varchar(\"first_name\"),\n  lastName: varchar(\"last_name\"),\n  profileImageUrl: varchar(\"profile_image_url\"),\n  isAdmin: boolean(\"is_admin\").default(false).notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\n// User favorites table\nexport const userFavorites = pgTable(\"user_favorites\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  podcastId: varchar(\"podcast_id\").notNull().references(() => podcasts.id, { onDelete: \"cascade\" }),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\n// User notes table\nexport const userNotes = pgTable(\"user_notes\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  userId: varchar(\"user_id\").notNull().references(() => users.id, { onDelete: \"cascade\" }),\n  podcastId: varchar(\"podcast_id\").notNull().references(() => podcasts.id, { onDelete: \"cascade\" }),\n  note: text(\"note\").notNull(),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n  updatedAt: timestamp(\"updated_at\").defaultNow(),\n});\n\nexport type UpsertUser = typeof users.$inferInsert;\nexport type User = typeof users.$inferSelect;\nexport type UserFavorite = typeof userFavorites.$inferSelect;\nexport type InsertUserFavorite = typeof userFavorites.$inferInsert;\nexport type UserNote = typeof userNotes.$inferSelect;\nexport type InsertUserNote = typeof userNotes.$inferInsert;\n\nexport const insertUserNoteSchema = createInsertSchema(userNotes).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\n// Authentication schemas\nexport const registerUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n  isAdmin: true,\n}).extend({\n  confirmPassword: z.string(),\n}).transform((data) => ({\n  // Trim inputs server-side before validation\n  username: data.username?.trim(),\n  password: data.password,\n  email: data.email?.trim(),\n  firstName: data.firstName?.trim(),\n  lastName: data.lastName?.trim(),\n  confirmPassword: data.confirmPassword,\n})).pipe(z.object({\n  // Username minimum length ≥ 3 characters\n  username: z.string().min(3, \"Username must be at least 3 characters long\"),\n  // Password minimum length ≥ 8 characters with complexity requirements\n  password: z.string()\n    .min(8, \"Password must be at least 8 characters long\")\n    .regex(/^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)/, \"Password must contain at least one uppercase letter, one lowercase letter, and one number\"),\n  // Email format validation\n  email: z.string().email(\"Please enter a valid email address\").optional().or(z.literal(\"\")),\n  firstName: z.string().optional(),\n  lastName: z.string().optional(),\n  confirmPassword: z.string(),\n})).refine((data) => data.password === data.confirmPassword, {\n  message: \"Passwords don't match\",\n  path: [\"confirmPassword\"],\n});\n\nexport const loginUserSchema = z.object({\n  username: z.string().min(1, \"Username is required\").transform(val => val.trim()),\n  password: z.string().min(1, \"Password is required\"),\n});\n\nexport type RegisterUser = z.infer<typeof registerUserSchema>;\nexport type LoginUser = z.infer<typeof loginUserSchema>;\n","size_bytes":5749},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport Home from \"@/pages/home\";\nimport Landing from \"@/pages/landing\";\nimport Admin from \"@/pages/admin\";\nimport AuthPage from \"@/pages/auth-page\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/landing\" component={Landing} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <Route path=\"/admin\">\n        <ProtectedRoute requireAdmin>\n          <Admin />\n        </ProtectedRoute>\n      </Route>\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <TooltipProvider>\n        <Toaster />\n        <Router />\n      </TooltipProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1100},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700&family=Playfair+Display:wght@400;600;700&display=swap');\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  --background: hsl(24, 10%, 98%);\n  --foreground: hsl(342, 65%, 26%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(342, 65%, 26%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(342, 65%, 26%);\n  --primary: hsl(345, 69%, 37%);\n  --primary-foreground: hsl(0, 0%, 98%);\n  --secondary: hsl(348, 96%, 93%);\n  --secondary-foreground: hsl(342, 65%, 26%);\n  --muted: hsl(24, 6%, 95%);\n  --muted-foreground: hsl(343, 8%, 45%);\n  --accent: hsl(351, 84%, 75%);\n  --accent-foreground: hsl(342, 65%, 26%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 98%);\n  --border: hsl(351, 12%, 90%);\n  --input: hsl(351, 12%, 90%);\n  --ring: hsl(345, 69%, 37%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(180, 6.6667%, 97.0588%);\n  --sidebar-foreground: hsl(210, 25%, 7.8431%);\n  --sidebar-primary: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(211.5789, 51.3514%, 92.7451%);\n  --sidebar-accent-foreground: hsl(203.8863, 88.2845%, 53.1373%);\n  --sidebar-border: hsl(205.0000, 25.0000%, 90.5882%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: 'Playfair Display', serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Wine theme colors */\n  --wine-50: hsl(348, 100%, 97%);\n  --wine-100: hsl(348, 96%, 93%);\n  --wine-200: hsl(351, 89%, 85%);\n  --wine-300: hsl(351, 84%, 75%);\n  --wine-400: hsl(351, 77%, 63%);\n  --wine-500: hsl(351, 69%, 51%);\n  --wine-600: hsl(348, 69%, 44%);\n  --wine-700: hsl(345, 69%, 37%);\n  --wine-800: hsl(343, 66%, 31%);\n  --wine-900: hsl(342, 65%, 26%);\n  --wine-950: hsl(340, 68%, 14%);\n}\n\n.dark {\n  --background: hsl(0, 0%, 0%);\n  --foreground: hsl(200, 6.6667%, 91.1765%);\n  --card: hsl(228, 9.8039%, 10%);\n  --card-foreground: hsl(0, 0%, 85.0980%);\n  --popover: hsl(0, 0%, 0%);\n  --popover-foreground: hsl(200, 6.6667%, 91.1765%);\n  --primary: hsl(203.7736, 87.6033%, 52.5490%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(195.0000, 15.3846%, 94.9020%);\n  --secondary-foreground: hsl(210, 25%, 7.8431%);\n  --muted: hsl(0, 0%, 9.4118%);\n  --muted-foreground: hsl(210, 3.3898%, 46.2745%);\n  --accent: hsl(205.7143, 70%, 7.8431%);\n  --accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --destructive: hsl(356.3033, 90.5579%, 54.3137%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(210, 5.2632%, 14.9020%);\n  --input: hsl(207.6923, 27.6596%, 18.4314%);\n  --ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --chart-1: hsl(203.8863, 88.2845%, 53.1373%);\n  --chart-2: hsl(159.7826, 100%, 36.0784%);\n  --chart-3: hsl(42.0290, 92.8251%, 56.2745%);\n  --chart-4: hsl(147.1429, 78.5047%, 41.9608%);\n  --chart-5: hsl(341.4894, 75.2000%, 50.9804%);\n  --sidebar: hsl(228, 9.8039%, 10%);\n  --sidebar-foreground: hsl(0, 0%, 85.0980%);\n  --sidebar-primary: hsl(202.8169, 89.1213%, 53.1373%);\n  --sidebar-primary-foreground: hsl(0, 0%, 100%);\n  --sidebar-accent: hsl(205.7143, 70%, 7.8431%);\n  --sidebar-accent-foreground: hsl(203.7736, 87.6033%, 52.5490%);\n  --sidebar-border: hsl(205.7143, 15.7895%, 26.0784%);\n  --sidebar-ring: hsl(202.8169, 89.1213%, 53.1373%);\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: 'Playfair Display', serif;\n  --font-mono: Menlo, monospace;\n  --radius: 12px;\n  --shadow-2xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xs: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-sm: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 1px 2px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-md: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 2px 4px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-lg: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 4px 6px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00), 0px 8px 10px -1px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n  --shadow-2xl: 0px 2px 0px 0px hsl(202.8169, 89.1213%, 53.1373%, 0.00);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n@layer components {\n  .glass-morphism {\n    background: rgba(255, 255, 255, 0.25);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.18);\n  }\n\n  .wine-gradient {\n    background: linear-gradient(135deg, var(--wine-700) 0%, var(--wine-600) 100%);\n  }\n\n  .podcast-card {\n    transition: all 0.3s cubic-bezier(0.4, 0, 0.2, 1);\n  }\n\n  .podcast-card:hover {\n    transform: translateY(-4px);\n    box-shadow: 0 20px 25px -5px rgba(114, 47, 55, 0.1), 0 10px 10px -5px rgba(114, 47, 55, 0.04);\n  }\n\n  .filter-pill {\n    transition: all 0.2s ease-in-out;\n  }\n\n  .filter-pill:hover {\n    transform: scale(1.05);\n  }\n\n  .filter-pill.active {\n    background: linear-gradient(135deg, var(--wine-700) 0%, var(--wine-600) 100%);\n    color: white;\n    box-shadow: 0 4px 12px rgba(114, 47, 55, 0.3);\n  }\n\n  .search-bar {\n    box-shadow: 0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06);\n  }\n\n\n  /* Mobile Overflow Prevention - Critical for eliminating horizontal scroll */\n  @media (max-width: 768px) {\n    html, body {\n      overflow-x: hidden !important;\n      max-width: 100vw;\n    }\n    \n    * {\n      box-sizing: border-box;\n    }\n    \n    /* Prevent flex item overflow */\n    .flex > *, [class*=\"flex-\"] > * {\n      min-width: 0;\n    }\n    \n    /* Container constraints */\n    .container {\n      max-width: 100vw !important;\n      padding-left: 0.5rem !important;\n      padding-right: 0.5rem !important;\n    }\n    \n    /* Grid item constraints */\n    [class*=\"grid-cols\"] > * {\n      min-width: 0;\n      word-wrap: break-word;\n      overflow-wrap: break-word;\n    }\n    \n    /* Text truncation improvements */\n    [class*=\"truncate\"] {\n      overflow: hidden !important;\n      text-overflow: ellipsis !important;\n      white-space: nowrap !important;\n    }\n  }\n}\n","size_bytes":7445},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"client/src/components/csv-import.tsx":{"content":"import { useState, useRef } from \"react\";\nimport { useMutation, useQueryClient } from \"@tanstack/react-query\";\nimport { Button } from \"@/components/ui/button\";\nimport { Progress } from \"@/components/ui/progress\";\nimport { Checkbox } from \"@/components/ui/checkbox\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { FileText, Upload, CheckCircle, AlertCircle, RefreshCw } from \"lucide-react\";\n\ninterface ImportResult {\n  success: boolean;\n  imported: number;\n  duplicatesSkipped: number;\n  updated: number;\n  errors: number;\n  errorMessages: string[];\n  totalRows?: number;\n  headers?: string[];\n  podcasts?: any[];\n  updatedPodcasts?: any[];\n  overwriteMode?: boolean;\n}\n\nexport function CSVImport() {\n  const [file, setFile] = useState<File | null>(null);\n  const [dragActive, setDragActive] = useState(false);\n  const [overwriteDuplicates, setOverwriteDuplicates] = useState(false);\n  const fileInputRef = useRef<HTMLInputElement>(null);\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  const importMutation = useMutation({\n    mutationFn: async (file: File) => {\n      const formData = new FormData();\n      formData.append('csvFile', file);\n      \n      const url = new URL('/api/podcasts/import', window.location.origin);\n      if (overwriteDuplicates) {\n        url.searchParams.append('overwrite', 'true');\n      }\n      \n      const response = await fetch(url.toString(), {\n        method: 'POST',\n        body: formData,\n      });\n      \n      if (!response.ok) {\n        throw new Error('Import failed');\n      }\n      \n      return response.json() as Promise<ImportResult>;\n    },\n    onSuccess: (data) => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/podcasts\"] });\n      queryClient.invalidateQueries({ queryKey: [\"/api/statistics\"] });\n      \n      let description = `${data.imported} new podcasts imported.`;\n      if (data.duplicatesSkipped > 0) {\n        description += ` ${data.duplicatesSkipped} duplicates skipped.`;\n      }\n      if (data.updated > 0) {\n        description += ` ${data.updated} existing podcasts updated.`;\n      }\n      if (data.errors > 0) {\n        description += ` ${data.errors} rows had errors.`;\n      }\n      \n      toast({\n        title: \"Import Completed!\",\n        description,\n      });\n      \n      setFile(null);\n    },\n    onError: () => {\n      toast({\n        title: \"Import Failed\",\n        description: \"There was an error importing your CSV file. Please check the format and try again.\",\n        variant: \"destructive\",\n      });\n    }\n  });\n\n  const handleDrag = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    if (e.type === \"dragenter\" || e.type === \"dragover\") {\n      setDragActive(true);\n    } else if (e.type === \"dragleave\") {\n      setDragActive(false);\n    }\n  };\n\n  const handleDrop = (e: React.DragEvent) => {\n    e.preventDefault();\n    e.stopPropagation();\n    setDragActive(false);\n    \n    const droppedFile = e.dataTransfer.files?.[0];\n    if (droppedFile && droppedFile.type === \"text/csv\") {\n      setFile(droppedFile);\n    } else {\n      toast({\n        title: \"Invalid File\",\n        description: \"Please upload a CSV file.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleFileChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    const selectedFile = e.target.files?.[0];\n    if (selectedFile) {\n      setFile(selectedFile);\n    }\n  };\n\n  const handleImport = () => {\n    if (file) {\n      importMutation.mutate(file);\n    }\n  };\n\n  const triggerFileInput = () => {\n    fileInputRef.current?.click();\n  };\n\n  return (\n    <div className=\"bg-card rounded-xl p-6 border border-border\">\n      <div className=\"max-w-2xl mx-auto\">\n        <div className=\"text-center mb-8\">\n          <div className=\"w-16 h-16 bg-primary/10 rounded-full flex items-center justify-center mx-auto mb-4\">\n            <FileText className=\"text-2xl text-primary\" />\n          </div>\n          <h2 className=\"text-2xl font-bold mb-2\">Import Podcast Data</h2>\n          <p className=\"text-muted-foreground\">Upload a CSV file to add new podcasts to the directory</p>\n        </div>\n\n        {/* CSV Upload Area */}\n        <div\n          className={`border-2 border-dashed rounded-lg p-8 text-center mb-6 transition-colors cursor-pointer ${\n            dragActive\n              ? \"border-primary/50 bg-primary/5\"\n              : \"border-border hover:border-primary/50\"\n          }`}\n          onDragEnter={handleDrag}\n          onDragLeave={handleDrag}\n          onDragOver={handleDrag}\n          onDrop={handleDrop}\n          onClick={triggerFileInput}\n          data-testid=\"csv-dropzone\"\n        >\n          <Upload className=\"w-12 h-12 text-muted-foreground mx-auto mb-4\" />\n          <h3 className=\"text-lg font-semibold mb-2\">\n            {file ? file.name : \"Drop your CSV file here\"}\n          </h3>\n          <p className=\"text-muted-foreground mb-4\">or click to browse</p>\n          \n          <input\n            type=\"file\"\n            accept=\".csv\"\n            className=\"hidden\"\n            ref={fileInputRef}\n            onChange={handleFileChange}\n            data-testid=\"input-csv-file\"\n          />\n          \n          <Button onClick={triggerFileInput} data-testid=\"button-choose-file\">\n            Choose File\n          </Button>\n        </div>\n\n        {/* Overwrite Option */}\n        {file && (\n          <div className=\"bg-muted rounded-lg p-4 mb-4\">\n            <div className=\"flex items-center space-x-3 mb-3\">\n              <Checkbox\n                id=\"overwrite-duplicates\"\n                checked={overwriteDuplicates}\n                onCheckedChange={(checked) => setOverwriteDuplicates(checked as boolean)}\n                data-testid=\"checkbox-overwrite-duplicates\"\n              />\n              <label\n                htmlFor=\"overwrite-duplicates\"\n                className=\"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70 cursor-pointer\"\n              >\n                Update existing podcasts with same title and host\n              </label>\n            </div>\n            <p className=\"text-xs text-muted-foreground mb-3\">\n              {overwriteDuplicates \n                ? \"Existing podcasts will be updated with new data from the CSV\" \n                : \"Duplicate podcasts will be skipped during import\"}\n            </p>\n            <div className=\"flex items-center justify-between\">\n              <div className=\"flex items-center gap-2\">\n                <FileText className=\"w-5 h-5 text-primary\" />\n                <span className=\"font-medium\">{file.name}</span>\n                <span className=\"text-sm text-muted-foreground\">\n                  ({(file.size / 1024).toFixed(1)} KB)\n                </span>\n              </div>\n              <Button\n                onClick={handleImport}\n                disabled={importMutation.isPending}\n                data-testid=\"button-import-csv\"\n                className=\"flex items-center gap-2\"\n              >\n                {overwriteDuplicates && <RefreshCw className=\"w-4 h-4\" />}\n                {importMutation.isPending ? \"Importing...\" : \"Import CSV\"}\n              </Button>\n            </div>\n          </div>\n        )}\n\n        {/* Upload Progress */}\n        {importMutation.isPending && (\n          <div className=\"bg-primary/10 border border-primary/20 rounded-lg p-4 mb-6\">\n            <div className=\"flex items-center gap-3 mb-2\">\n              <div className=\"w-6 h-6 border-2 border-primary border-t-transparent rounded-full animate-spin\"></div>\n              <span className=\"font-medium\">Processing CSV file...</span>\n            </div>\n            <Progress value={65} className=\"mb-2\" />\n            <p className=\"text-sm text-muted-foreground\">Validating and importing podcast data</p>\n          </div>\n        )}\n\n        {/* Upload Results */}\n        {importMutation.data && (\n          <div className={`border rounded-lg p-4 mb-6 ${\n            importMutation.data.imported > 0 \n              ? 'bg-green-50 border-green-200' \n              : 'bg-orange-50 border-orange-200'\n          }`}>\n            <div className=\"flex items-center gap-3 mb-2\">\n              {importMutation.data.imported > 0 ? (\n                <CheckCircle className=\"w-5 h-5 text-green-600\" />\n              ) : (\n                <AlertCircle className=\"w-5 h-5 text-orange-600\" />\n              )}\n              <span className={`font-medium ${\n                importMutation.data.imported > 0 ? 'text-green-800' : 'text-orange-800'\n              }`}>\n                {importMutation.data.imported > 0 ? 'Import Successful!' : 'Import Issues Found'}\n              </span>\n            </div>\n            \n            <div className={`text-sm mb-3 ${\n              importMutation.data.imported > 0 ? 'text-green-700' : 'text-orange-700'\n            }`}>\n              <p>• Total rows processed: {importMutation.data.totalRows || 0}</p>\n              <p>• New podcasts imported: {importMutation.data.imported}</p>\n              {importMutation.data.duplicatesSkipped > 0 && (\n                <p>• Duplicates skipped: {importMutation.data.duplicatesSkipped}</p>\n              )}\n              {importMutation.data.updated > 0 && (\n                <p>• Existing podcasts updated: {importMutation.data.updated}</p>\n              )}\n              {importMutation.data.errors > 0 && (\n                <p>• Rows with errors: {importMutation.data.errors}</p>\n              )}\n              {importMutation.data.overwriteMode && (\n                <p className=\"text-xs mt-1 opacity-75\">• Overwrite mode was enabled</p>\n              )}\n            </div>\n\n            {importMutation.data.headers && (\n              <details className=\"mb-3\">\n                <summary className={`cursor-pointer text-sm font-medium ${\n                  importMutation.data.imported > 0 ? 'text-green-700' : 'text-orange-700'\n                } hover:opacity-80`}>\n                  View CSV Headers ({importMutation.data.headers.length} columns)\n                </summary>\n                <div className={`mt-2 p-2 rounded text-xs font-mono ${\n                  importMutation.data.imported > 0 ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\n                }`}>\n                  {importMutation.data.headers.join(', ')}\n                </div>\n              </details>\n            )}\n            \n            {importMutation.data.errorMessages.length > 0 && (\n              <details className=\"mt-2\">\n                <summary className={`cursor-pointer text-sm font-medium ${\n                  importMutation.data.imported > 0 ? 'text-green-700' : 'text-orange-700'\n                } hover:opacity-80`}>\n                  View Error Details ({importMutation.data.errorMessages.length} errors)\n                </summary>\n                <div className={`mt-2 max-h-32 overflow-y-auto p-2 rounded text-xs font-mono ${\n                  importMutation.data.imported > 0 ? 'bg-green-100 text-green-800' : 'bg-orange-100 text-orange-800'\n                }`}>\n                  {importMutation.data.errorMessages.map((error, index) => (\n                    <div key={index} className=\"mb-1\">• {error}</div>\n                  ))}\n                </div>\n              </details>\n            )}\n          </div>\n        )}\n\n        {/* CSV Format Guide */}\n        <div className=\"bg-muted rounded-lg p-4\">\n          <h4 className=\"font-semibold mb-2 flex items-center gap-2\">\n            <AlertCircle className=\"w-4 h-4 text-primary\" />\n            Required CSV Format\n          </h4>\n          <div className=\"text-sm text-muted-foreground\">\n            <p className=\"mb-2\">Your CSV file should include these columns:</p>\n            <div className=\"grid grid-cols-2 gap-2 font-mono text-xs\">\n              <span>• Podcast Title</span>\n              <span>• Podcast Host(s)</span>\n              <span>• Country of Production</span>\n              <span>• Primary Language(s)</span>\n              <span>• Year Launched</span>\n              <span>• Is currently active?</span>\n              <span>• Categories</span>\n              <span>• Episode Length</span>\n            </div>\n            <p className=\"mt-2 text-xs\">\n              Optional columns: Description, Episodes, Spotify URL, Instagram URL, YouTube URL, Website URL\n            </p>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":12418},"client/src/components/podcast-card.tsx":{"content":"import { useState } from \"react\";\nimport { MapPin, Calendar, Clock, Heart, Image, ExternalLink, Youtube } from \"lucide-react\";\nimport { SiSpotify, SiInstagram, SiApple, SiX } from \"react-icons/si\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Tooltip, TooltipContent, TooltipProvider, TooltipTrigger } from \"@/components/ui/tooltip\";\nimport { useMutation, useQuery, useQueryClient } from \"@tanstack/react-query\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { isUnauthorizedError } from \"@/lib/authUtils\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Podcast, UserFavorite } from \"@shared/schema\";\n\ninterface PodcastCardProps {\n  podcast: Podcast;\n  viewMode?: \"grid\" | \"list\";\n  userFavorites: UserFavorite[];\n  isAuthenticated: boolean;\n}\n\n// Image component with fallback and lazy loading\ninterface PodcastImageProps {\n  src?: string;\n  alt: string;\n  className: string;\n  testId: string;\n}\n\nfunction PodcastImage({ src, alt, className, testId }: PodcastImageProps) {\n  const [hasError, setHasError] = useState(false);\n  const [isLoading, setIsLoading] = useState(true);\n\n  const handleError = () => {\n    setHasError(true);\n    setIsLoading(false);\n  };\n\n  const handleLoad = () => {\n    setIsLoading(false);\n  };\n\n  // If no src or error occurred, show wine gradient fallback\n  if (!src || hasError) {\n    return (\n      <div className={`${className} wine-gradient relative flex items-center justify-center`}>\n        <div className=\"absolute inset-0 bg-black bg-opacity-20\"></div>\n        <Image className=\"w-8 h-8 text-white/60\" data-testid={`${testId}-fallback`} />\n      </div>\n    );\n  }\n\n  return (\n    <div className={`${className} relative overflow-hidden bg-wine-gradient`}>\n      {isLoading && (\n        <div className=\"absolute inset-0 wine-gradient flex items-center justify-center\">\n          <div className=\"absolute inset-0 bg-black bg-opacity-20\"></div>\n          <Image className=\"w-8 h-8 text-white/60\" />\n        </div>\n      )}\n      <img\n        src={src}\n        alt={alt}\n        loading=\"lazy\"\n        onError={handleError}\n        onLoad={handleLoad}\n        className={`w-full h-full object-cover transition-opacity duration-300 ${\n          isLoading ? 'opacity-0' : 'opacity-100'\n        }`}\n        data-testid={testId}\n      />\n      <div className=\"absolute inset-0 bg-black bg-opacity-10\"></div>\n    </div>\n  );\n}\n\nconst SOCIAL_ICON_MAP = {\n  spotify: SiSpotify,\n  instagram: SiInstagram, \n  youtube: Youtube,\n  website: ExternalLink,\n  apple: SiApple,\n  twitter: SiX,\n};\n\nconst SOCIAL_LABELS = {\n  spotify: \"Listen on Spotify\",\n  instagram: \"Follow on Instagram\",\n  youtube: \"Watch on YouTube\", \n  website: \"Visit Website\",\n  apple: \"Listen on Apple Podcasts\",\n  twitter: \"Follow on Twitter\",\n};\n\nconst SOCIAL_COLOR_MAP = {\n  spotify: \"bg-green-600 hover:bg-green-700 shadow-green-600/20\",\n  instagram: \"bg-gradient-to-br from-purple-600 to-pink-600 hover:from-purple-700 hover:to-pink-700 shadow-purple-600/20\",\n  youtube: \"bg-red-600 hover:bg-red-700 shadow-red-600/20\",\n  website: \"bg-gray-600 hover:bg-gray-700 shadow-gray-600/20\",\n  apple: \"bg-gray-900 hover:bg-black shadow-gray-900/20\",\n  twitter: \"bg-blue-500 hover:bg-blue-600 shadow-blue-500/20\",\n};\n\nexport function PodcastCard({ podcast, viewMode = \"grid\", userFavorites, isAuthenticated }: PodcastCardProps) {\n  const { toast } = useToast();\n  const queryClient = useQueryClient();\n\n  // Check if this podcast is favorited using the passed-in data\n  const isFavorited = userFavorites.some(fav => fav.podcastId === podcast.id);\n\n  // Add favorite mutation\n  const addFavoriteMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/user/favorites\", { podcastId: podcast.id });\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/favorites\"] });\n      toast({\n        title: \"Added to favorites\",\n        description: `${podcast.title} has been added to your favorites.`,\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to add to favorites. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Remove favorite mutation\n  const removeFavoriteMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"DELETE\", `/api/user/favorites/${podcast.id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user/favorites\"] });\n      toast({\n        title: \"Removed from favorites\",\n        description: `${podcast.title} has been removed from your favorites.`,\n      });\n    },\n    onError: (error: Error) => {\n      if (isUnauthorizedError(error)) {\n        toast({\n          title: \"Unauthorized\",\n          description: \"You are logged out. Logging in again...\",\n          variant: \"destructive\",\n        });\n        setTimeout(() => {\n          window.location.href = \"/api/login\";\n        }, 500);\n        return;\n      }\n      toast({\n        title: \"Error\",\n        description: \"Failed to remove from favorites. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleFavoriteToggle = () => {\n    // Redirect to login if user is not authenticated\n    if (!isAuthenticated) {\n      window.location.href = \"/api/login\";\n      return;\n    }\n    \n    if (isFavorited) {\n      removeFavoriteMutation.mutate();\n    } else {\n      addFavoriteMutation.mutate();\n    }\n  };\n\n  // Helper function to convert Instagram handles to full URLs\n  const getSocialUrl = (platform: string, url: string) => {\n    if (platform === 'instagram' && url.startsWith('@')) {\n      // Convert @username to https://www.instagram.com/username/\n      const username = url.slice(1); // Remove @\n      return `https://www.instagram.com/${username}/`;\n    }\n    return url;\n  };\n\n\n  // Get top 3 social links in priority order\n  const prioritizedSocials = [\"spotify\", \"instagram\", \"youtube\", \"website\", \"apple\", \"twitter\"];\n  const availableSocials = prioritizedSocials\n    .filter(platform => podcast.socialLinks?.[platform as keyof typeof podcast.socialLinks])\n    .slice(0, 3);\n\n  if (viewMode === \"list\") {\n    return (\n      <TooltipProvider>\n        <div className=\"podcast-card group bg-card rounded-2xl border border-border/50 overflow-hidden shadow-sm hover:shadow-xl hover:shadow-wine-500/10 transition-all duration-500 hover:-translate-y-1 hover:border-wine-300/50\">\n          <div className=\"p-3 sm:p-6 flex flex-col sm:flex-row gap-4 sm:gap-6\">\n            {/* Left side - Enhanced Podcast image */}\n            <div className=\"relative flex-shrink-0 mx-auto sm:mx-0\">\n              <PodcastImage\n                src={podcast.imageUrl ?? undefined}\n                alt={`${podcast.title} podcast logo`}\n                className=\"w-20 h-20 sm:w-28 sm:h-28 rounded-2xl group-hover:scale-105 transition-transform duration-700\"\n                testId={`img-podcast-list-${podcast.id}`}\n              />\n              \n              \n              {/* Favorite Button - Top Right Corner */}\n              <div className=\"absolute -top-2 -right-2\">\n                <Tooltip>\n                  <TooltipTrigger asChild>\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={handleFavoriteToggle}\n                      disabled={isAuthenticated && (addFavoriteMutation.isPending || removeFavoriteMutation.isPending)}\n                      data-testid={`button-favorite-${podcast.id}`}\n                      className=\"w-7 h-7 sm:w-8 sm:h-8 bg-wine-100 hover:bg-wine-200 dark:bg-wine-900 dark:hover:bg-wine-800 border border-wine-200 dark:border-wine-700 rounded-full transition-all duration-300 hover:scale-110\"\n                    >\n                      <Heart \n                        className={`w-3 h-3 sm:w-3.5 sm:h-3.5 transition-all duration-300 ${isAuthenticated && isFavorited ? \"fill-red-500 text-red-500 scale-110\" : \"text-wine-600 dark:text-wine-300 group-hover:text-red-400\"}`}\n                      />\n                    </Button>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p>{isAuthenticated ? (isFavorited ? \"Remove from favorites\" : \"Add to favorites\") : \"Sign in to favorite\"}</p>\n                  </TooltipContent>\n                </Tooltip>\n              </div>\n            </div>\n\n            {/* Content Section */}\n            <div className=\"flex-1 min-w-0\">\n              {/* Title and Host */}\n              <div className=\"mb-3 sm:mb-4 text-center sm:text-left\">\n                <h3 className=\"font-bold text-lg sm:text-xl leading-tight truncate sm:line-clamp-2 text-foreground group-hover:text-wine-700 transition-colors duration-300 mb-1 sm:mb-2\">\n                  {podcast.title}\n                </h3>\n                <p className=\"text-sm sm:text-base text-muted-foreground font-medium\">\n                  Hosted by {podcast.host}\n                </p>\n              </div>\n\n              {/* Metadata in organized layout */}\n              <div className=\"grid grid-cols-2 sm:grid-cols-2 lg:grid-cols-3 gap-2 sm:gap-3 mb-3 sm:mb-4\">\n                <div className=\"flex items-center gap-2 text-sm\">\n                  <MapPin className=\"w-3 h-3 sm:w-4 sm:h-4 text-wine-500 flex-shrink-0\" />\n                  <div className=\"flex flex-col min-w-0\">\n                    <span className=\"font-medium text-foreground truncate text-xs sm:text-sm\">{podcast.country}</span>\n                    <span className=\"text-xs text-muted-foreground truncate hidden sm:block\">{podcast.language}</span>\n                  </div>\n                </div>\n                \n                <div className=\"flex items-center gap-2 text-sm sm:block hidden\">\n                  <Calendar className=\"w-4 h-4 text-wine-500 flex-shrink-0\" />\n                  <div className=\"flex flex-col min-w-0\">\n                    <span className=\"font-medium text-foreground\">{podcast.year}</span>\n                    <span className=\"text-xs text-muted-foreground truncate\">{podcast.episodes}</span>\n                  </div>\n                </div>\n                \n                {podcast.episodeLength && (\n                  <div className=\"flex items-center gap-2 text-sm hidden lg:flex\">\n                    <Clock className=\"w-4 h-4 text-wine-500 flex-shrink-0\" />\n                    <div className=\"flex flex-col min-w-0\">\n                      <span className=\"font-medium text-foreground truncate\">{podcast.episodeLength}</span>\n                      <span className=\"text-xs text-muted-foreground\">Episode length</span>\n                    </div>\n                  </div>\n                )}\n              </div>\n\n              {/* Categories */}\n              <div className=\"flex flex-wrap gap-1 sm:gap-2 mb-3 sm:mb-4 justify-center sm:justify-start\">\n                {podcast.categories.slice(0, podcast.categories.length > 3 ? 2 : 3).map(category => (\n                  <Badge \n                    key={category} \n                    variant=\"secondary\" \n                    className=\"bg-wine-50 text-wine-700 border-wine-200 hover:bg-wine-100 transition-colors duration-200 text-xs px-2 sm:px-3 py-1\"\n                  >\n                    {category}\n                  </Badge>\n                ))}\n                {podcast.categories.length > 3 && (\n                  <Badge variant=\"outline\" className=\"text-xs px-2 sm:px-3 py-1 text-muted-foreground\">\n                    +{podcast.categories.length - 2} more\n                  </Badge>\n                )}\n              </div>\n\n              {/* Description - Hidden on mobile to save space */}\n              {podcast.description && (\n                <p className=\"text-sm text-muted-foreground line-clamp-2 leading-relaxed mb-3 sm:mb-4 hidden sm:block\">\n                  {podcast.description}\n                </p>\n              )}\n\n              {/* Social Links Footer */}\n              <div className=\"flex items-center justify-center sm:justify-end pt-3 sm:pt-4 border-t border-border/50\">\n                <div className=\"flex gap-1 sm:gap-2\">\n                  {availableSocials.map((platform, index) => {\n                    const IconComponent = SOCIAL_ICON_MAP[platform as keyof typeof SOCIAL_ICON_MAP];\n                    return (\n                      <Tooltip key={platform}>\n                        <TooltipTrigger asChild>\n                          <a\n                            href={getSocialUrl(platform, podcast.socialLinks?.[platform as keyof typeof podcast.socialLinks] || '')}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            className={`w-8 h-8 sm:w-9 sm:h-9 rounded-full flex items-center justify-center text-white transition-all duration-300 hover:scale-110 hover:shadow-lg ${\n                              SOCIAL_COLOR_MAP[platform as keyof typeof SOCIAL_COLOR_MAP]\n                            } ${index > 1 ? 'hidden sm:flex' : ''}`}\n                            data-testid={`link-social-${platform}-${podcast.id}`}\n                          >\n                            <IconComponent className=\"w-3.5 h-3.5 sm:w-4 sm:h-4\" />\n                          </a>\n                        </TooltipTrigger>\n                        <TooltipContent>\n                          <p>{SOCIAL_LABELS[platform as keyof typeof SOCIAL_LABELS]}</p>\n                        </TooltipContent>\n                      </Tooltip>\n                    );\n                  })}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </TooltipProvider>\n    );\n  }\n\n  // Grid view (default)\n  return (\n    <TooltipProvider>\n      <div className=\"podcast-card group bg-card rounded-2xl border border-border/50 overflow-hidden shadow-sm hover:shadow-xl hover:shadow-wine-500/10 transition-all duration-500 hover:-translate-y-1 hover:border-wine-300/50\">\n        {/* Podcast Image with Enhanced Wine Background */}\n        <div className=\"relative h-40 sm:h-48 overflow-hidden\">\n          <PodcastImage\n            src={podcast.imageUrl ?? undefined}\n            alt={`${podcast.title} podcast logo`}\n            className=\"h-full group-hover:scale-105 transition-transform duration-700\"\n            testId={`img-podcast-grid-${podcast.id}`}\n          />\n          \n          \n          {/* Favorite Button - Top Right */}\n          <div className=\"absolute top-2 right-2 sm:top-3 sm:right-3\">\n            <Tooltip>\n              <TooltipTrigger asChild>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={handleFavoriteToggle}\n                  disabled={isAuthenticated && (addFavoriteMutation.isPending || removeFavoriteMutation.isPending)}\n                  data-testid={`button-favorite-${podcast.id}`}\n                  className=\"w-8 h-8 sm:w-9 sm:h-9 bg-black/20 hover:bg-black/40 backdrop-blur-md text-white border-0 rounded-full transition-all duration-300 hover:scale-110\"\n                >\n                  <Heart \n                    className={`w-3.5 h-3.5 sm:w-4 sm:h-4 transition-all duration-300 ${isAuthenticated && isFavorited ? \"fill-red-500 text-red-500 scale-110\" : \"text-white group-hover:text-red-200\"}`}\n                  />\n                </Button>\n              </TooltipTrigger>\n              <TooltipContent>\n                <p>{isAuthenticated ? (isFavorited ? \"Remove from favorites\" : \"Add to favorites\") : \"Sign in to favorite\"}</p>\n              </TooltipContent>\n            </Tooltip>\n          </div>\n          \n          {/* Gradient Overlay for better text readability */}\n          <div className=\"absolute inset-0 bg-gradient-to-t from-black/40 via-transparent to-transparent opacity-60\"></div>\n        </div>\n\n        {/* Card Content */}\n        <div className=\"p-4 sm:p-6 space-y-3 sm:space-y-4\">\n          {/* Title and Host */}\n          <div className=\"space-y-1 sm:space-y-2\">\n            <h3 className=\"font-bold text-lg sm:text-xl leading-tight truncate sm:line-clamp-2 text-foreground group-hover:text-wine-700 transition-colors duration-300\">\n              {podcast.title}\n            </h3>\n            <p className=\"text-sm sm:text-base text-muted-foreground font-medium\">\n              Hosted by {podcast.host}\n            </p>\n          </div>\n\n          {/* Metadata Grid */}\n          <div className=\"grid grid-cols-1 sm:grid-cols-2 gap-2 sm:gap-3 py-1 sm:py-2\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground justify-center sm:justify-start\">\n              <MapPin className=\"w-3 h-3 sm:w-4 sm:h-4 text-wine-500\" />\n              <div className=\"flex flex-col\">\n                <span className=\"font-medium text-foreground text-xs sm:text-sm\">{podcast.country}</span>\n                <span className=\"text-xs hidden sm:block\">{podcast.language}</span>\n              </div>\n            </div>\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground justify-center sm:justify-start hidden sm:flex\">\n              <Calendar className=\"w-4 h-4 text-wine-500\" />\n              <div className=\"flex flex-col\">\n                <span className=\"font-medium text-foreground\">{podcast.year}</span>\n                <span className=\"text-xs\">{podcast.episodes}</span>\n              </div>\n            </div>\n          </div>\n\n          {podcast.episodeLength && (\n            <div className=\"hidden sm:flex items-center gap-2 text-sm bg-muted/30 rounded-lg px-3 py-2\">\n              <Clock className=\"w-4 h-4 text-wine-500\" />\n              <span className=\"font-medium text-foreground\">{podcast.episodeLength}</span>\n            </div>\n          )}\n\n          {/* Categories */}\n          <div className=\"flex flex-wrap gap-1 sm:gap-2 justify-center sm:justify-start\">\n            {podcast.categories.slice(0, podcast.categories.length > 2 ? 1 : 2).map(category => (\n              <Badge \n                key={category} \n                variant=\"secondary\" \n                className=\"bg-wine-50 text-wine-700 border-wine-200 hover:bg-wine-100 transition-colors duration-200 text-xs px-2 sm:px-3 py-1\"\n              >\n                {category}\n              </Badge>\n            ))}\n            {podcast.categories.length > 1 && (\n              <Badge variant=\"outline\" className=\"text-xs px-2 sm:px-3 py-1 text-muted-foreground\">\n                <span className=\"sm:hidden\">+{podcast.categories.length - 1}</span>\n                <span className=\"hidden sm:inline\">+{podcast.categories.length - 2} more</span>\n              </Badge>\n            )}\n          </div>\n\n          {/* Description - Hidden on mobile to save space */}\n          {podcast.description && (\n            <p className=\"text-sm text-muted-foreground line-clamp-2 leading-relaxed hidden sm:block\">\n              {podcast.description}\n            </p>\n          )}\n\n          {/* Social Links */}\n          <div className=\"flex items-center justify-center gap-1 sm:gap-2 pt-2 border-t border-border/50\">\n            {availableSocials.map((platform, index) => {\n              const IconComponent = SOCIAL_ICON_MAP[platform as keyof typeof SOCIAL_ICON_MAP];\n              return (\n                <Tooltip key={platform}>\n                  <TooltipTrigger asChild>\n                    <a\n                      href={getSocialUrl(platform, podcast.socialLinks?.[platform as keyof typeof podcast.socialLinks] || '')}\n                      target=\"_blank\"\n                      rel=\"noopener noreferrer\"\n                      className={`w-8 h-8 sm:w-9 sm:h-9 rounded-full flex items-center justify-center text-white transition-all duration-300 hover:scale-110 hover:shadow-lg ${\n                        SOCIAL_COLOR_MAP[platform as keyof typeof SOCIAL_COLOR_MAP]\n                      } group-hover:animate-pulse ${index > 1 ? 'hidden sm:flex' : ''}`}\n                      data-testid={`link-social-${platform}-${podcast.id}`}\n                    >\n                      <IconComponent className=\"w-3.5 h-3.5 sm:w-4 sm:h-4\" />\n                    </a>\n                  </TooltipTrigger>\n                  <TooltipContent>\n                    <p>{SOCIAL_LABELS[platform as keyof typeof SOCIAL_LABELS]}</p>\n                  </TooltipContent>\n                </Tooltip>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </TooltipProvider>\n  );\n}\n","size_bytes":20795},"client/src/components/search-filters.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Search, X, Eraser } from \"lucide-react\";\nimport type { SearchFilters as SearchFiltersType } from \"@shared/schema\";\n\ninterface SearchFiltersProps {\n  onFiltersChange: (filters: SearchFiltersType) => void;\n  resultsCount: number;\n}\n\nconst EPISODE_LENGTHS = [\n  { value: \"Under 10 minutes\", label: \"Under 10 minutes\" },\n  { value: \"10-20 minutes\", label: \"10-20 minutes\" },\n  { value: \"20-40 minutes\", label: \"20-40 minutes\" },\n  { value: \"40+ minutes\", label: \"40+ minutes\" },\n];\n\nconst CATEGORIES = [\n  \"Educational\",\n  \"Entertainment\",\n  \"Regional\",\n  \"Wine Business\",\n];\n\nconst SORT_OPTIONS = [\n  { value: \"title\", label: \"Name A-Z\" },\n  { value: \"title-desc\", label: \"Name Z-A\" },\n  { value: \"year\", label: \"Launch Year\" },\n  { value: \"year-desc\", label: \"Launch Year (Recent)\" },\n  { value: \"episodes\", label: \"Episode Count\" },\n  { value: \"episodes-desc\", label: \"Episode Count (Most)\" },\n  { value: \"country\", label: \"Country\" },\n];\n\nexport function SearchFilters({ onFiltersChange, resultsCount }: SearchFiltersProps) {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [episodeLength, setEpisodeLength] = useState(\"\");\n  const [selectedCategories, setSelectedCategories] = useState<string[]>([]);\n  const [sortBy, setSortBy] = useState(\"\");\n\n  // Update filters when any value changes\n  useEffect(() => {\n    const filters: SearchFiltersType = {\n      query: searchQuery || undefined,\n      episodeLength: episodeLength || undefined,\n      categories: selectedCategories.length > 0 ? selectedCategories : undefined,\n      sortBy: (sortBy as any) || undefined,\n    };\n\n    onFiltersChange(filters);\n  }, [searchQuery, episodeLength, selectedCategories, sortBy]);\n\n  const handleCategoryToggle = (category: string) => {\n    setSelectedCategories(prev => \n      prev.includes(category)\n        ? prev.filter(c => c !== category)\n        : [...prev, category]\n    );\n  };\n\n  const clearSearch = () => {\n    setSearchQuery(\"\");\n  };\n\n  const clearAllFilters = () => {\n    setSearchQuery(\"\");\n    setEpisodeLength(\"\");\n    setSelectedCategories([]);\n    setSortBy(\"\");\n  };\n\n  return (\n    <div className=\"bg-card rounded-xl p-6 mb-8 search-bar\">\n      {/* Search Bar */}\n      <div className=\"relative mb-6\">\n        <div className=\"absolute inset-y-0 left-0 pl-4 flex items-center pointer-events-none\">\n          <Search className=\"text-muted-foreground w-5 h-5\" />\n        </div>\n        <Input\n          type=\"text\"\n          placeholder=\"Search podcasts by name, host, keywords, or region...\"\n          className=\"w-full pl-12 pr-12 py-4 text-lg\"\n          value={searchQuery}\n          onChange={(e) => setSearchQuery(e.target.value)}\n          data-testid=\"input-search\"\n        />\n        {searchQuery && (\n          <button \n            className=\"absolute inset-y-0 right-0 pr-4 flex items-center text-muted-foreground hover:text-foreground transition-colors\"\n            onClick={clearSearch}\n            data-testid=\"button-clear-search\"\n          >\n            <X className=\"w-5 h-5\" />\n          </button>\n        )}\n      </div>\n\n      {/* Filter Controls */}\n      <div className=\"space-y-4\">\n        {/* Episode Length Filter */}\n        <div className=\"flex flex-wrap items-center gap-3\">\n          <span className=\"text-sm font-medium text-muted-foreground min-w-max\">Episode Length:</span>\n          <div className=\"flex flex-wrap gap-2\">\n            <Button\n              variant={!episodeLength ? \"default\" : \"outline\"}\n              size=\"sm\"\n              onClick={() => setEpisodeLength(\"\")}\n              className={`filter-pill ${!episodeLength ? 'active' : ''}`}\n              data-testid=\"filter-length-all\"\n            >\n              All Lengths\n            </Button>\n            {EPISODE_LENGTHS.map(length => (\n              <Button\n                key={length.value}\n                variant={episodeLength === length.value ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => setEpisodeLength(length.value)}\n                className={`filter-pill ${episodeLength === length.value ? 'active' : ''}`}\n                data-testid={`filter-length-${length.value}`}\n              >\n                {length.label}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Category Filter Pills */}\n        <div className=\"flex flex-wrap items-center gap-3\">\n          <span className=\"text-sm font-medium text-muted-foreground min-w-max\">Categories:</span>\n          <div className=\"flex flex-wrap gap-2\">\n            {CATEGORIES.map(category => (\n              <Button\n                key={category}\n                variant={selectedCategories.includes(category) ? \"default\" : \"outline\"}\n                size=\"sm\"\n                onClick={() => handleCategoryToggle(category)}\n                className={`filter-pill ${selectedCategories.includes(category) ? 'active' : ''}`}\n                data-testid={`filter-category-${category.toLowerCase().replace(/\\s+/g, '-')}`}\n              >\n                {category}\n              </Button>\n            ))}\n          </div>\n        </div>\n\n        {/* Quick Actions */}\n        <div className=\"flex flex-wrap items-center justify-between gap-4 pt-4 border-t border-border\">\n          <div className=\"flex items-center gap-4\">\n            <span className=\"text-sm text-muted-foreground\">\n              Results: <span className=\"font-semibold text-primary\" data-testid=\"text-results-count\">{resultsCount}</span>\n            </span>\n            <div className=\"flex items-center gap-2\">\n              <label htmlFor=\"sortBy\" className=\"text-sm text-muted-foreground\">Sort by:</label>\n              <Select value={sortBy} onValueChange={setSortBy}>\n                <SelectTrigger className=\"w-48\" data-testid=\"select-sort\">\n                  <SelectValue placeholder=\"Sort by...\" />\n                </SelectTrigger>\n                <SelectContent>\n                  {SORT_OPTIONS.map(option => (\n                    <SelectItem key={option.value} value={option.value}>\n                      {option.label}\n                    </SelectItem>\n                  ))}\n                </SelectContent>\n              </Select>\n            </div>\n          </div>\n          <Button\n            variant=\"ghost\"\n            onClick={clearAllFilters}\n            className=\"text-destructive hover:text-destructive/80\"\n            data-testid=\"button-clear-all-filters\"\n          >\n            <Eraser className=\"w-4 h-4 mr-2\" />\n            Clear All Filters\n          </Button>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":6809},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/csv-utils.ts":{"content":"export interface CSVRow {\n  [key: string]: string;\n}\n\nexport function parseCSV(csvText: string): CSVRow[] {\n  const lines = csvText.split('\\n');\n  const headers = lines[0].split(',').map(header => header.trim().replace(/\"/g, ''));\n  const rows: CSVRow[] = [];\n\n  for (let i = 1; i < lines.length; i++) {\n    const line = lines[i].trim();\n    if (!line) continue;\n\n    const values = parseCSVLine(line);\n    if (values.length === headers.length) {\n      const row: CSVRow = {};\n      headers.forEach((header, index) => {\n        row[header] = values[index].trim().replace(/\"/g, '');\n      });\n      rows.push(row);\n    }\n  }\n\n  return rows;\n}\n\nfunction parseCSVLine(line: string): string[] {\n  const result: string[] = [];\n  let current = '';\n  let inQuotes = false;\n  \n  for (let i = 0; i < line.length; i++) {\n    const char = line[i];\n    \n    if (char === '\"') {\n      inQuotes = !inQuotes;\n    } else if (char === ',' && !inQuotes) {\n      result.push(current);\n      current = '';\n    } else {\n      current += char;\n    }\n  }\n  \n  result.push(current);\n  return result;\n}\n\nexport function validatePodcastCSVRow(row: CSVRow): string[] {\n  const errors: string[] = [];\n  \n  if (!row['Podcast Title'] && !row['title']) {\n    errors.push('Missing podcast title');\n  }\n  \n  if (!row['Podcast Host(s)'] && !row['host']) {\n    errors.push('Missing podcast host');\n  }\n  \n  if (!row['Country of Production'] && !row['country']) {\n    errors.push('Missing country');\n  }\n  \n  // Language is now optional - defaults to English on server\n  const language = row['Primary Language(s) of the Podcast'] || row['Primary Language(s)'] || row['language'];\n  if (!language) {\n    // Don't treat as error - server will apply default\n    console.log('Language field empty, will use default \"English\"');\n  }\n  \n  const year = row['Year Launched'] || row['year'];\n  if (!year || isNaN(parseInt(year))) {\n    errors.push('Missing or invalid year');\n  }\n  \n  return errors;\n}\n","size_bytes":1957},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    let url = queryKey[0] as string;\n    \n    // If there's a second element and it's an object, treat it as query params\n    if (queryKey.length > 1 && typeof queryKey[1] === 'object' && queryKey[1] !== null) {\n      const params = new URLSearchParams();\n      const filters = queryKey[1] as Record<string, any>;\n      \n      Object.entries(filters).forEach(([key, value]) => {\n        if (value !== undefined && value !== null && value !== '') {\n          if (Array.isArray(value)) {\n            value.forEach((item) => params.append(key, String(item)));\n          } else {\n            params.append(key, String(value));\n          }\n        }\n      });\n      \n      const queryString = params.toString();\n      if (queryString) {\n        url += '?' + queryString;\n      }\n    } else if (queryKey.length > 1) {\n      // Fallback to original join behavior for non-object elements\n      url = queryKey.join(\"/\") as string;\n    }\n    \n    const res = await fetch(url, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":2291},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/home.tsx":{"content":"import { useState, useCallback } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { SearchFilters } from \"@/components/search-filters\";\nimport { PodcastCard } from \"@/components/podcast-card\";\nimport { CSVImport } from \"@/components/csv-import\";\nimport { Button } from \"@/components/ui/button\";\nimport { Avatar, AvatarFallback, AvatarImage } from \"@/components/ui/avatar\";\nimport { DropdownMenu, DropdownMenuContent, DropdownMenuItem, DropdownMenuTrigger } from \"@/components/ui/dropdown-menu\";\nimport { Grid, List, Search, Upload, Heart, FileText, LogOut, User as UserIcon, LogIn, Settings } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport type { Podcast, SearchFilters as SearchFiltersType, UserFavorite, User } from \"@shared/schema\";\n\nexport default function Home() {\n  const [activeTab, setActiveTab] = useState<\"discover\" | \"favorites\" | \"notes\" | \"import\">(\"discover\");\n  const [viewMode, setViewMode] = useState<\"grid\" | \"list\">(\"grid\");\n  const [searchFilters, setSearchFilters] = useState<SearchFiltersType>({});\n  const { user, isAuthenticated, logout } = useAuth();\n\n  // Main podcasts query\n  const { data: podcasts = [], isLoading } = useQuery<Podcast[]>({\n    queryKey: [\"/api/podcasts\", searchFilters],\n    enabled: activeTab === \"discover\",\n  });\n\n  // User favorites query - moved from individual cards to prevent duplicate queries\n  const { data: userFavorites = [] } = useQuery<UserFavorite[]>({\n    queryKey: [\"/api/user/favorites\"],\n    enabled: isAuthenticated,\n  });\n\n  // Favorite podcast IDs for quick lookup\n  const favoriteIds = new Set(userFavorites.map(fav => fav.podcastId));\n\n  // Get favorite podcasts with details\n  const { data: favoritePodcasts = [] } = useQuery<Podcast[]>({\n    queryKey: [\"/api/podcasts\", {}],\n    select: (data) => data.filter(podcast => favoriteIds.has(podcast.id)),\n    enabled: isAuthenticated && activeTab === \"favorites\" && userFavorites.length > 0,\n  });\n\n  // Memoize the filter change handler to prevent unnecessary re-renders\n  const handleFilterChange = useCallback((filters: SearchFiltersType) => {\n    setSearchFilters(filters);\n  }, []);\n\n  const handleTabChange = (tab: \"discover\" | \"favorites\" | \"notes\" | \"import\") => {\n    // Redirect to auth page if trying to access personal features while unauthenticated\n    if (!isAuthenticated && tab !== \"discover\") {\n      window.location.href = \"/auth\";\n      return;\n    }\n    setActiveTab(tab);\n  };\n\n  const handleLogout = async () => {\n    await logout();\n  };\n\n  const getUserDisplayName = () => {\n    if (user?.firstName && user?.lastName) {\n      return `${user.firstName} ${user.lastName}`;\n    }\n    if (user?.firstName) {\n      return user.firstName;\n    }\n    if (user?.email) {\n      return user.email.split('@')[0];\n    }\n    return 'User';\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <header className=\"wine-gradient text-white relative overflow-hidden\">\n        <div className=\"container mx-auto px-2 sm:px-4 py-4 sm:py-8 relative z-10\">\n          <div className=\"flex flex-col sm:flex-row sm:justify-between items-center sm:items-start mb-3 sm:mb-4 text-center sm:text-left\">\n            <div className=\"flex-1 mb-3 sm:mb-0\">\n              <h1 className=\"text-2xl sm:text-4xl md:text-6xl font-bold mb-2 sm:mb-4 text-shadow leading-tight\">\n                Wine Podcast Directory\n              </h1>\n              <p className=\"text-base sm:text-xl md:text-2xl opacity-90 px-4 sm:px-0\">\n                Discover premium wine podcasts from around the world\n              </p>\n            </div>\n            \n            {/* Navigation - User Menu or Login Button */}\n            <div className=\"flex items-center gap-2 sm:gap-4\">\n              {isAuthenticated ? (\n                <DropdownMenu>\n                  <DropdownMenuTrigger asChild>\n                    <Button variant=\"ghost\" className=\"text-white hover:bg-white/10 p-1 sm:p-2\" data-testid=\"button-user-menu\">\n                      <Avatar className=\"w-7 h-7 sm:w-8 sm:h-8 mr-1 sm:mr-2\">\n                        <AvatarImage src={user?.profileImageUrl || undefined} />\n                        <AvatarFallback className=\"text-wine-dark text-xs sm:text-sm\">\n                          {getUserDisplayName().charAt(0).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                      <span className=\"hidden sm:inline text-sm sm:text-base\">{getUserDisplayName()}</span>\n                    </Button>\n                  </DropdownMenuTrigger>\n                  <DropdownMenuContent align=\"end\" className=\"w-48\">\n                    <DropdownMenuItem disabled>\n                      <UserIcon className=\"mr-2 h-4 w-4\" />\n                      <span data-testid=\"text-user-email\">{user?.email}</span>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem asChild>\n                      <Link href=\"/admin\" data-testid=\"link-admin\">\n                        <Settings className=\"mr-2 h-4 w-4\" />\n                        <span>Admin Panel</span>\n                      </Link>\n                    </DropdownMenuItem>\n                    <DropdownMenuItem onClick={handleLogout} data-testid=\"button-logout\">\n                      <LogOut className=\"mr-2 h-4 w-4\" />\n                      <span>Sign Out</span>\n                    </DropdownMenuItem>\n                  </DropdownMenuContent>\n                </DropdownMenu>\n              ) : (\n                <Button\n                  variant=\"secondary\"\n                  onClick={() => window.location.href = \"/auth\"}\n                  data-testid=\"button-login\"\n                  className=\"hidden bg-white/10 hover:bg-white/20 text-white border-white/20 text-sm sm:text-base px-3 sm:px-4 py-2\"\n                >\n                  <LogIn className=\"w-3 h-3 sm:w-4 sm:h-4 mr-1 sm:mr-2\" />\n                  <span className=\"hidden xs:inline\">Sign In</span>\n                  <span className=\"xs:hidden\">Login</span>\n                </Button>\n              )}\n            </div>\n          </div>\n        </div>\n        <div className=\"absolute inset-0 bg-black opacity-20\"></div>\n        <div className=\"absolute -bottom-1 left-0 right-0 h-8 bg-gradient-to-r from-rose-900/20 to-amber-900/20 transform skew-y-1\"></div>\n      </header>\n\n      {/* Navigation Tabs */}\n      <nav className=\"bg-card border-b border-border sticky top-0 z-50 overflow-x-auto\">\n        <div className=\"container mx-auto px-2 sm:px-4\">\n          <div className=\"flex space-x-2 sm:space-x-8 min-w-max sm:min-w-0\">\n            <button \n              className={`flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-3 sm:py-4 border-b-2 font-medium transition-colors whitespace-nowrap text-sm sm:text-base ${\n                activeTab === \"discover\" \n                  ? \"border-primary text-primary\" \n                  : \"border-transparent text-muted-foreground hover:text-foreground\"\n              }`}\n              onClick={() => handleTabChange(\"discover\")}\n              data-testid=\"tab-discover\"\n            >\n              <Search className=\"w-4 h-4\" />\n              <span>Discover</span>\n            </button>\n            {isAuthenticated && (\n              <>\n                <button \n                  className={`flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-3 sm:py-4 border-b-2 font-medium transition-colors whitespace-nowrap text-sm sm:text-base ${\n                    activeTab === \"favorites\" \n                      ? \"border-primary text-primary\" \n                      : \"border-transparent text-muted-foreground hover:text-foreground\"\n                  }`}\n                  onClick={() => handleTabChange(\"favorites\")}\n                  data-testid=\"tab-favorites\"\n                >\n                  <Heart className=\"w-4 h-4\" />\n                  <span className=\"hidden xs:inline\">Favorites ({userFavorites.length})</span>\n                  <span className=\"xs:hidden\">♥ {userFavorites.length}</span>\n                </button>\n                <button \n                  className={`flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-3 sm:py-4 border-b-2 font-medium transition-colors whitespace-nowrap text-sm sm:text-base ${\n                    activeTab === \"notes\" \n                      ? \"border-primary text-primary\" \n                      : \"border-transparent text-muted-foreground hover:text-foreground\"\n                  }`}\n                  onClick={() => handleTabChange(\"notes\")}\n                  data-testid=\"tab-notes\"\n                >\n                  <FileText className=\"w-4 h-4\" />\n                  <span className=\"hidden sm:inline\">Notes</span>\n                  <span className=\"sm:hidden\">📝</span>\n                </button>\n                <button \n                  className={`flex items-center gap-1 sm:gap-2 px-3 sm:px-4 py-3 sm:py-4 border-b-2 font-medium transition-colors whitespace-nowrap text-sm sm:text-base ${\n                    activeTab === \"import\" \n                      ? \"border-primary text-primary\" \n                      : \"border-transparent text-muted-foreground hover:text-foreground\"\n                  }`}\n                  onClick={() => handleTabChange(\"import\")}\n                  data-testid=\"tab-import\"\n                >\n                  <Upload className=\"w-4 h-4\" />\n                  <span className=\"hidden sm:inline\">Import CSV</span>\n                  <span className=\"sm:hidden\">⬆️</span>\n                </button>\n              </>\n            )}\n          </div>\n        </div>\n      </nav>\n\n      <main className=\"container mx-auto px-2 sm:px-4 py-4 sm:py-8\">\n        {/* Discover Tab */}\n        {activeTab === \"discover\" && (\n          <>\n            {/* Search and Filters */}\n            <SearchFilters \n              onFiltersChange={handleFilterChange}\n              resultsCount={podcasts.length}\n            />\n\n            {/* Podcast Grid */}\n            <div className=\"space-y-4 sm:space-y-6\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3 sm:gap-0\">\n                <h2 className=\"text-xl sm:text-2xl font-bold\">Discover Podcasts</h2>\n                <div className=\"flex items-center gap-2 hidden sm:flex\">\n                  <Button\n                    variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"grid\")}\n                    data-testid=\"button-grid-view\"\n                  >\n                    <Grid className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"list\")}\n                    data-testid=\"button-list-view\"\n                  >\n                    <List className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              {isLoading ? (\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 sm:gap-6\">\n                  {Array.from({ length: 8 }).map((_, i) => (\n                    <div key={i} className=\"h-64 sm:h-96 bg-muted animate-pulse rounded-xl\" />\n                  ))}\n                </div>\n              ) : podcasts.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Search className=\"w-8 h-8 text-muted-foreground\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold mb-2\">No podcasts found</h3>\n                  <p className=\"text-muted-foreground\">Try adjusting your search criteria or import some podcast data.</p>\n                </div>\n              ) : (\n                <div className={`grid gap-4 sm:gap-6 ${\n                  viewMode === \"grid\" \n                    ? \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\" \n                    : \"grid-cols-1\"\n                }`}>\n                  {podcasts.map((podcast) => (\n                    <PodcastCard\n                      key={podcast.id}\n                      podcast={podcast}\n                      viewMode={viewMode}\n                      userFavorites={userFavorites}\n                      isAuthenticated={isAuthenticated}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          </>\n        )}\n\n        {/* Favorites Tab */}\n        {activeTab === \"favorites\" && (\n          <>\n            <div className=\"space-y-4 sm:space-y-6\">\n              <div className=\"flex flex-col sm:flex-row sm:items-center justify-between gap-3 sm:gap-0\">\n                <h2 className=\"text-xl sm:text-2xl font-bold\">Your Favorites ({userFavorites.length})</h2>\n                <div className=\"flex items-center gap-2 hidden sm:flex\">\n                  <Button\n                    variant={viewMode === \"grid\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"grid\")}\n                    data-testid=\"button-grid-view\"\n                  >\n                    <Grid className=\"w-4 h-4\" />\n                  </Button>\n                  <Button\n                    variant={viewMode === \"list\" ? \"default\" : \"outline\"}\n                    size=\"sm\"\n                    onClick={() => setViewMode(\"list\")}\n                    data-testid=\"button-list-view\"\n                  >\n                    <List className=\"w-4 h-4\" />\n                  </Button>\n                </div>\n              </div>\n\n              {favoritePodcasts.length === 0 ? (\n                <div className=\"text-center py-12\">\n                  <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                    <Heart className=\"w-8 h-8 text-muted-foreground\" />\n                  </div>\n                  <h3 className=\"text-lg font-semibold mb-2\">No favorites yet</h3>\n                  <p className=\"text-muted-foreground\">Start exploring podcasts and add them to your favorites!</p>\n                </div>\n              ) : (\n                <div className={`grid gap-4 sm:gap-6 ${\n                  viewMode === \"grid\" \n                    ? \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\" \n                    : \"grid-cols-1\"\n                }`}>\n                  {favoritePodcasts.map((podcast) => (\n                    <PodcastCard\n                      key={podcast.id}\n                      podcast={podcast}\n                      viewMode={viewMode}\n                      userFavorites={userFavorites}\n                      isAuthenticated={isAuthenticated}\n                    />\n                  ))}\n                </div>\n              )}\n            </div>\n          </>\n        )}\n\n        {/* Notes Tab */}\n        {activeTab === \"notes\" && (\n          <div className=\"space-y-6\">\n            <h2 className=\"text-2xl font-bold\">Your Notes</h2>\n            <div className=\"text-center py-12\">\n              <div className=\"w-16 h-16 bg-muted rounded-full flex items-center justify-center mx-auto mb-4\">\n                <FileText className=\"w-8 h-8 text-muted-foreground\" />\n              </div>\n              <h3 className=\"text-lg font-semibold mb-2\">Notes feature coming soon</h3>\n              <p className=\"text-muted-foreground\">Add personal notes to your favorite podcasts.</p>\n            </div>\n          </div>\n        )}\n\n        {/* Import Tab */}\n        {activeTab === \"import\" && <CSVImport />}\n      </main>\n\n      {/* Podcast detail modal removed per user requirements */}\n    </div>\n  );\n}\n","size_bytes":15760},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/hooks/useAuth.ts":{"content":"import { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\nimport type { User, LoginUser, RegisterUser } from \"@shared/schema\";\n\nexport function useAuth() {\n  const { data: user, isLoading, error } = useQuery<User>({\n    queryKey: [\"/api/user\"],\n    retry: false,\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginUser) => {\n      const response = await apiRequest('POST', '/api/login', credentials);\n      const data = await response.json();\n      return data.user;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (userData: RegisterUser) => {\n      const response = await apiRequest('POST', '/api/register', userData);\n      const data = await response.json();\n      return data.user;\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest('POST', '/api/logout');\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/user\"] });\n      queryClient.clear(); // Clear all cached data on logout\n    },\n  });\n\n  const login = async (credentials: LoginUser) => {\n    try {\n      await loginMutation.mutateAsync(credentials);\n      return { success: true };\n    } catch (error: any) {\n      return { \n        success: false, \n        error: error.message || 'Login failed' \n      };\n    }\n  };\n\n  const register = async (userData: RegisterUser) => {\n    try {\n      await registerMutation.mutateAsync(userData);\n      return { success: true };\n    } catch (error: any) {\n      return { \n        success: false, \n        error: error.message || 'Registration failed' \n      };\n    }\n  };\n\n  const logout = async () => {\n    try {\n      await logoutMutation.mutateAsync();\n      return { success: true };\n    } catch (error: any) {\n      return { \n        success: false, \n        error: error.message || 'Logout failed' \n      };\n    }\n  };\n\n  return {\n    user,\n    isLoading,\n    isAuthenticated: !!user,\n    isAdmin: !!user?.isAdmin,\n    login,\n    register,\n    logout,\n    loginPending: loginMutation.isPending,\n    registerPending: registerMutation.isPending,\n    logoutPending: logoutMutation.isPending,\n  };\n}","size_bytes":2415},"client/src/lib/authUtils.ts":{"content":"export function isUnauthorizedError(error: Error): boolean {\n  return /^401: .*Unauthorized/.test(error.message);\n}","size_bytes":115},"client/src/pages/landing.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Wine, Headphones, Globe, Play } from \"lucide-react\";\n\nexport default function Landing() {\n  const handleLogin = () => {\n    window.location.href = \"/api/login\";\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Header */}\n      <header className=\"wine-gradient text-white relative overflow-hidden\">\n        <div className=\"container mx-auto px-4 py-16 relative z-10\">\n          <div className=\"text-center\">\n            <h1 className=\"text-5xl md:text-7xl font-bold mb-6 text-shadow\">\n              Wine Podcast Directory\n            </h1>\n            <p className=\"text-xl md:text-3xl mb-12 opacity-90 max-w-4xl mx-auto\">\n              Discover premium wine podcasts from around the world. Save favorites, add notes, and explore the finest wine content.\n            </p>\n            <Button \n              onClick={handleLogin}\n              size=\"lg\"\n              className=\"bg-white text-wine-dark hover:bg-gray-100 font-semibold px-8 py-4 text-lg\"\n              data-testid=\"button-login\"\n            >\n              <Play className=\"mr-2 h-5 w-5\" />\n              Get Started\n            </Button>\n          </div>\n        </div>\n        <div className=\"absolute inset-0 bg-black opacity-20\"></div>\n        <div className=\"absolute -bottom-1 left-0 right-0 h-8 bg-gradient-to-r from-rose-900/20 to-amber-900/20 transform skew-y-1\"></div>\n      </header>\n\n      {/* Features */}\n      <section className=\"py-20 bg-muted/20\">\n        <div className=\"container mx-auto px-4\">\n          <div className=\"grid md:grid-cols-3 gap-12\">\n            <div className=\"text-center\">\n              <div className=\"wine-gradient w-16 h-16 rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <Headphones className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Curated Collection</h3>\n              <p className=\"text-muted-foreground\">\n                Discover handpicked wine podcasts from renowned sommeliers, critics, and industry experts worldwide.\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"wine-gradient w-16 h-16 rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <Wine className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Personal Collection</h3>\n              <p className=\"text-muted-foreground\">\n                Save your favorite podcasts, add personal notes, and build your own curated wine learning library.\n              </p>\n            </div>\n            <div className=\"text-center\">\n              <div className=\"wine-gradient w-16 h-16 rounded-full mx-auto mb-6 flex items-center justify-center\">\n                <Globe className=\"h-8 w-8 text-white\" />\n              </div>\n              <h3 className=\"text-xl font-semibold mb-4\">Global Reach</h3>\n              <p className=\"text-muted-foreground\">\n                Explore wine culture through podcasts from France, Italy, California, Australia, and beyond.\n              </p>\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Call to Action */}\n      <section className=\"py-20 bg-card\">\n        <div className=\"container mx-auto px-4 text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-6\">Ready to Start Your Wine Journey?</h2>\n          <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            Join our community of wine enthusiasts and discover your next favorite podcast today.\n          </p>\n          <Button \n            onClick={handleLogin}\n            size=\"lg\"\n            className=\"wine-gradient text-white hover:opacity-90 font-semibold px-8 py-4 text-lg\"\n            data-testid=\"button-login-cta\"\n          >\n            <Play className=\"mr-2 h-5 w-5\" />\n            Sign In to Begin\n          </Button>\n        </div>\n      </section>\n    </div>\n  );\n}","size_bytes":4039},"client/src/pages/admin.tsx":{"content":"import { useState, useCallback, useEffect } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { useLocation } from \"wouter\";\nimport { SearchFilters } from \"@/components/search-filters\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Avatar, AvatarImage, AvatarFallback } from \"@/components/ui/avatar\";\nimport { Dialog, DialogContent, DialogDescription, DialogFooter, DialogHeader, DialogTitle } from \"@/components/ui/dialog\";\nimport { AlertDialog, AlertDialogAction, AlertDialogCancel, AlertDialogContent, AlertDialogDescription, AlertDialogFooter, AlertDialogHeader, AlertDialogTitle } from \"@/components/ui/alert-dialog\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from \"@/components/ui/select\";\nimport { Separator } from \"@/components/ui/separator\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { Edit, Trash2, Plus, Settings, ExternalLink, Globe, Music, Instagram, Youtube } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertPodcastSchema } from \"@shared/schema\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport type { Podcast, SearchFilters as SearchFiltersType, InsertPodcast } from \"@shared/schema\";\nimport { z } from \"zod\";\n\n// Form schema for editing podcasts\nconst editPodcastFormSchema = z.object({\n  title: z.string().min(1, \"Title is required\"),\n  host: z.string().min(1, \"Host is required\"),\n  country: z.string().min(1, \"Country is required\"),\n  language: z.string().min(1, \"Language is required\"),\n  year: z.coerce.number().min(1900).max(2100),\n  status: z.string().min(1, \"Status is required\"),\n  categories: z.string().transform((val) => val ? val.split(',').map(s => s.trim()).filter(Boolean) : []),\n  episodeLength: z.string().optional(),\n  episodes: z.string().optional(),\n  description: z.string().optional(),\n  imageUrl: z.string().optional(),\n  socialLinks: z.object({\n    spotify: z.string().optional(),\n    instagram: z.string().optional(),\n    youtube: z.string().optional(),\n    website: z.string().optional(),\n    apple: z.string().optional(),\n    twitter: z.string().optional(),\n  }),\n});\n\ntype EditPodcastFormData = z.infer<typeof editPodcastFormSchema>;\n\nexport default function Admin() {\n  const [searchFilters, setSearchFilters] = useState<SearchFiltersType>({});\n  const [editingPodcast, setEditingPodcast] = useState<Podcast | null>(null);\n  const [deletingPodcast, setDeletingPodcast] = useState<Podcast | null>(null);\n  const { user, isAuthenticated, logout } = useAuth();\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  // Redirect if not authenticated (fallback, should be handled by ProtectedRoute)\n  useEffect(() => {\n    if (!isAuthenticated) {\n      window.location.href = \"/auth\";\n    }\n  }, [isAuthenticated]);\n\n  // Podcasts query with search filters\n  const { data: podcasts = [], isLoading, error } = useQuery<Podcast[]>({\n    queryKey: [\"/api/podcasts\", searchFilters],\n    enabled: isAuthenticated,\n  });\n\n  // Edit form setup\n  const editForm = useForm({\n    resolver: zodResolver(editPodcastFormSchema),\n    defaultValues: {\n      title: \"\",\n      host: \"\",\n      country: \"\",\n      language: \"\",\n      year: new Date().getFullYear(),\n      status: \"Active\",\n      categories: \"\",\n      episodeLength: \"\",\n      episodes: \"\",\n      description: \"\",\n      imageUrl: \"\",\n      socialLinks: {\n        spotify: \"\",\n        instagram: \"\",\n        youtube: \"\",\n        website: \"\",\n        apple: \"\",\n        twitter: \"\",\n      },\n    },\n  });\n\n  // Update mutation\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertPodcast }) => {\n      return apiRequest(\"PATCH\", `/api/podcasts/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/podcasts\"] });\n      setEditingPodcast(null);\n      editForm.reset();\n      toast({\n        title: \"Success\",\n        description: \"Podcast updated successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to update podcast\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  // Delete mutation\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return apiRequest(\"DELETE\", `/api/podcasts/${id}`);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/podcasts\"] });\n      setDeletingPodcast(null);\n      toast({\n        title: \"Success\",\n        description: \"Podcast deleted successfully\",\n      });\n    },\n    onError: (error) => {\n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to delete podcast\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const handleEdit = (podcast: Podcast) => {\n    setEditingPodcast(podcast);\n    editForm.reset({\n      title: podcast.title,\n      host: podcast.host,\n      country: podcast.country,\n      language: podcast.language,\n      year: podcast.year,\n      status: podcast.status,\n      categories: Array.isArray(podcast.categories) ? podcast.categories.join(', ') : \"\",\n      episodeLength: podcast.episodeLength || \"\",\n      episodes: podcast.episodes || \"\",\n      description: podcast.description || \"\",\n      imageUrl: podcast.imageUrl || \"\",\n      socialLinks: {\n        spotify: podcast.socialLinks?.spotify || \"\",\n        instagram: podcast.socialLinks?.instagram || \"\",\n        youtube: podcast.socialLinks?.youtube || \"\",\n        website: podcast.socialLinks?.website || \"\",\n        apple: podcast.socialLinks?.apple || \"\",\n        twitter: podcast.socialLinks?.twitter || \"\",\n      },\n    });\n  };\n\n  const handleDelete = (podcast: Podcast) => {\n    setDeletingPodcast(podcast);\n  };\n\n  const onSubmitEdit = async (data: any) => {\n    if (!editingPodcast) return;\n\n    const submitData: InsertPodcast = {\n      ...data,\n      categories: data.categories,\n      socialLinks: data.socialLinks,\n    };\n\n    updateMutation.mutate({\n      id: editingPodcast.id,\n      data: submitData,\n    });\n  };\n\n  const onConfirmDelete = () => {\n    if (!deletingPodcast) return;\n    deleteMutation.mutate(deletingPodcast.id);\n  };\n\n  const handleFilterChange = useCallback((filters: SearchFiltersType) => {\n    setSearchFilters(filters);\n  }, []);\n\n  const getSocialIcon = (platform: string) => {\n    switch (platform) {\n      case 'spotify':\n        return <Music className=\"w-4 h-4\" />;\n      case 'instagram':\n        return <Instagram className=\"w-4 h-4\" />;\n      case 'youtube':\n        return <Youtube className=\"w-4 h-4\" />;\n      case 'website':\n        return <Globe className=\"w-4 h-4\" />;\n      default:\n        return <ExternalLink className=\"w-4 h-4\" />;\n    }\n  };\n\n  if (!isAuthenticated) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Authentication Required</h1>\n          <p className=\"text-muted-foreground mb-4\">Please sign in to access the admin panel.</p>\n          <Button onClick={() => window.location.href = \"/auth\"} data-testid=\"button-login\">\n            Sign In\n          </Button>\n        </div>\n      </div>\n    );\n  }\n\n  if (error) {\n    return (\n      <div className=\"min-h-screen bg-background flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-2xl font-bold mb-4\">Error Loading Podcasts</h1>\n          <p className=\"text-muted-foreground\">Please try refreshing the page.</p>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen bg-background\">\n      {/* Header */}\n      <header className=\"bg-card border-b border-border\">\n        <div className=\"container mx-auto px-4 py-6\">\n          <div className=\"flex items-center justify-between\">\n            <div className=\"flex items-center gap-3\">\n              <Settings className=\"w-6 h-6 text-primary\" />\n              <h1 className=\"text-2xl font-bold\">Podcast Admin</h1>\n            </div>\n            <div className=\"text-sm text-muted-foreground\">\n              {podcasts.length} podcast{podcasts.length !== 1 ? 's' : ''} total\n            </div>\n          </div>\n        </div>\n      </header>\n\n      <main className=\"container mx-auto px-4 py-8\">\n        {/* Search and Filters */}\n        <div className=\"mb-8\">\n          <SearchFilters onFiltersChange={handleFilterChange} resultsCount={podcasts.length} />\n        </div>\n\n        {/* Podcasts List */}\n        {isLoading ? (\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {Array.from({ length: 6 }).map((_, i) => (\n              <Card key={i} className=\"animate-pulse\">\n                <CardHeader>\n                  <div className=\"h-4 bg-muted rounded w-3/4\"></div>\n                  <div className=\"h-3 bg-muted rounded w-1/2\"></div>\n                </CardHeader>\n                <CardContent>\n                  <div className=\"h-3 bg-muted rounded w-full mb-2\"></div>\n                  <div className=\"h-3 bg-muted rounded w-2/3\"></div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : podcasts.length === 0 ? (\n          <div className=\"text-center py-12\">\n            <h3 className=\"text-lg font-medium mb-2\">No podcasts found</h3>\n            <p className=\"text-muted-foreground\">Try adjusting your search filters.</p>\n          </div>\n        ) : (\n          <div className=\"grid gap-4 md:grid-cols-2 lg:grid-cols-3\">\n            {podcasts.map((podcast) => (\n              <Card key={podcast.id} className=\"group hover:shadow-md transition-shadow\" data-testid={`card-podcast-${podcast.id}`}>\n                <CardHeader className=\"pb-3\">\n                  <div className=\"flex items-start justify-between gap-3\">\n                    <div className=\"flex-1 min-w-0\">\n                      <CardTitle className=\"text-base leading-tight truncate\" data-testid={`text-title-${podcast.id}`}>\n                        {podcast.title}\n                      </CardTitle>\n                      <p className=\"text-sm text-muted-foreground mt-1 truncate\" data-testid={`text-host-${podcast.id}`}>\n                        by {podcast.host}\n                      </p>\n                    </div>\n                    {podcast.imageUrl && (\n                      <Avatar className=\"w-12 h-12 rounded-md\">\n                        <AvatarImage src={podcast.imageUrl} alt={podcast.title} />\n                        <AvatarFallback className=\"rounded-md text-xs\">\n                          {podcast.title.substring(0, 2).toUpperCase()}\n                        </AvatarFallback>\n                      </Avatar>\n                    )}\n                  </div>\n                </CardHeader>\n                <CardContent className=\"pt-0\">\n                  <div className=\"space-y-2\">\n                    <div className=\"flex flex-wrap gap-1\">\n                      <Badge variant=\"secondary\" className=\"text-xs\">{podcast.country}</Badge>\n                      <Badge variant=\"outline\" className=\"text-xs\">{podcast.status}</Badge>\n                      {podcast.episodeLength && (\n                        <Badge variant=\"outline\" className=\"text-xs\">{podcast.episodeLength}</Badge>\n                      )}\n                    </div>\n                    \n                    {podcast.categories.length > 0 && (\n                      <div className=\"flex flex-wrap gap-1\">\n                        {podcast.categories.slice(0, 3).map((category) => (\n                          <Badge key={category} variant=\"default\" className=\"text-xs\">\n                            {category}\n                          </Badge>\n                        ))}\n                        {podcast.categories.length > 3 && (\n                          <Badge variant=\"outline\" className=\"text-xs\">\n                            +{podcast.categories.length - 3}\n                          </Badge>\n                        )}\n                      </div>\n                    )}\n\n                    {podcast.description && (\n                      <p className=\"text-xs text-muted-foreground line-clamp-2\" data-testid={`text-description-${podcast.id}`}>\n                        {podcast.description}\n                      </p>\n                    )}\n\n                    {/* Social Links */}\n                    {podcast.socialLinks && Object.entries(podcast.socialLinks).some(([_, url]) => url) && (\n                      <div className=\"flex gap-1 flex-wrap\">\n                        {Object.entries(podcast.socialLinks).map(([platform, url]) => \n                          url ? (\n                            <a\n                              key={platform}\n                              href={url}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"p-1 rounded hover:bg-muted transition-colors\"\n                              data-testid={`link-${platform}-${podcast.id}`}\n                            >\n                              {getSocialIcon(platform)}\n                            </a>\n                          ) : null\n                        )}\n                      </div>\n                    )}\n\n                    {/* Admin Actions */}\n                    <div className=\"flex gap-2 pt-2 border-t\">\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleEdit(podcast)}\n                        data-testid={`button-edit-${podcast.id}`}\n                        className=\"flex-1\"\n                      >\n                        <Edit className=\"w-3 h-3 mr-1\" />\n                        Edit\n                      </Button>\n                      <Button\n                        size=\"sm\"\n                        variant=\"outline\"\n                        onClick={() => handleDelete(podcast)}\n                        data-testid={`button-delete-${podcast.id}`}\n                        className=\"text-destructive hover:text-destructive\"\n                      >\n                        <Trash2 className=\"w-3 h-3\" />\n                      </Button>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        )}\n      </main>\n\n      {/* Edit Dialog */}\n      <Dialog open={!!editingPodcast} onOpenChange={(open) => !open && setEditingPodcast(null)}>\n        <DialogContent className=\"sm:max-w-[600px] max-h-[80vh] overflow-y-auto\" data-testid=\"dialog-edit-podcast\">\n          <DialogHeader>\n            <DialogTitle>Edit Podcast</DialogTitle>\n            <DialogDescription>\n              Update the podcast information below.\n            </DialogDescription>\n          </DialogHeader>\n\n          <Form {...editForm}>\n            <form onSubmit={editForm.handleSubmit(onSubmitEdit)} className=\"space-y-4\">\n              {/* Basic Information */}\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"title\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Title *</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-title\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"host\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Host *</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-host\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-3 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"country\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Country *</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-country\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"language\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Language *</FormLabel>\n                      <FormControl>\n                        <Input {...field} data-testid=\"input-language\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"year\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Year *</FormLabel>\n                      <FormControl>\n                        <Input\n                          type=\"number\"\n                          {...field}\n                          onChange={(e) => field.onChange(parseInt(e.target.value))}\n                          data-testid=\"input-year\"\n                        />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"status\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Status *</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-status\">\n                            <SelectValue />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Active\">Active</SelectItem>\n                          <SelectItem value=\"On Hiatus\">On Hiatus</SelectItem>\n                          <SelectItem value=\"Ended\">Ended</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"episodeLength\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Episode Length</FormLabel>\n                      <Select onValueChange={field.onChange} defaultValue={field.value}>\n                        <FormControl>\n                          <SelectTrigger data-testid=\"select-episode-length\">\n                            <SelectValue placeholder=\"Select length\" />\n                          </SelectTrigger>\n                        </FormControl>\n                        <SelectContent>\n                          <SelectItem value=\"Unspecified\">None</SelectItem>\n                          <SelectItem value=\"Under 10min\">Under 10min</SelectItem>\n                          <SelectItem value=\"10-20min\">10-20min</SelectItem>\n                          <SelectItem value=\"20-40min\">20-40min</SelectItem>\n                          <SelectItem value=\"40min+\">40min+</SelectItem>\n                        </SelectContent>\n                      </Select>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <div className=\"grid grid-cols-2 gap-4\">\n                <FormField\n                  control={editForm.control}\n                  name=\"categories\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Categories</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"Wine, Food, Culture\" data-testid=\"input-categories\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n                <FormField\n                  control={editForm.control}\n                  name=\"episodes\"\n                  render={({ field }) => (\n                    <FormItem>\n                      <FormLabel>Episodes</FormLabel>\n                      <FormControl>\n                        <Input {...field} placeholder=\"50+ episodes\" data-testid=\"input-episodes\" />\n                      </FormControl>\n                      <FormMessage />\n                    </FormItem>\n                  )}\n                />\n              </div>\n\n              <FormField\n                control={editForm.control}\n                name=\"description\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Description</FormLabel>\n                    <FormControl>\n                      <Textarea {...field} rows={3} data-testid=\"textarea-description\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <FormField\n                control={editForm.control}\n                name=\"imageUrl\"\n                render={({ field }) => (\n                  <FormItem>\n                    <FormLabel>Image URL</FormLabel>\n                    <FormControl>\n                      <Input {...field} placeholder=\"https://...\" data-testid=\"input-image-url\" />\n                    </FormControl>\n                    <FormMessage />\n                  </FormItem>\n                )}\n              />\n\n              <Separator />\n\n              {/* Social Links */}\n              <div>\n                <h4 className=\"font-medium mb-3\">Social Links</h4>\n                <div className=\"grid grid-cols-2 gap-4\">\n                  <FormField\n                    control={editForm.control}\n                    name=\"socialLinks.spotify\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Spotify</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"https://spotify.com/...\" data-testid=\"input-spotify\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"socialLinks.instagram\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Instagram</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"https://instagram.com/...\" data-testid=\"input-instagram\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"socialLinks.youtube\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>YouTube</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"https://youtube.com/...\" data-testid=\"input-youtube\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"socialLinks.website\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Website</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"https://...\" data-testid=\"input-website\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"socialLinks.apple\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Apple Podcasts</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"https://podcasts.apple.com/...\" data-testid=\"input-apple\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                  <FormField\n                    control={editForm.control}\n                    name=\"socialLinks.twitter\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Twitter</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"https://twitter.com/...\" data-testid=\"input-twitter\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n                </div>\n              </div>\n\n              <DialogFooter>\n                <Button type=\"button\" variant=\"outline\" onClick={() => setEditingPodcast(null)} data-testid=\"button-cancel-edit\">\n                  Cancel\n                </Button>\n                <Button type=\"submit\" disabled={updateMutation.isPending} data-testid=\"button-save-podcast\">\n                  {updateMutation.isPending ? \"Saving...\" : \"Save Changes\"}\n                </Button>\n              </DialogFooter>\n            </form>\n          </Form>\n        </DialogContent>\n      </Dialog>\n\n      {/* Delete Confirmation Dialog */}\n      <AlertDialog open={!!deletingPodcast} onOpenChange={(open) => !open && setDeletingPodcast(null)}>\n        <AlertDialogContent data-testid=\"dialog-delete-confirmation\">\n          <AlertDialogHeader>\n            <AlertDialogTitle>Delete Podcast</AlertDialogTitle>\n            <AlertDialogDescription>\n              Are you sure you want to delete \"{deletingPodcast?.title}\"? This action cannot be undone.\n            </AlertDialogDescription>\n          </AlertDialogHeader>\n          <AlertDialogFooter>\n            <AlertDialogCancel data-testid=\"button-cancel-delete\">Cancel</AlertDialogCancel>\n            <AlertDialogAction\n              onClick={onConfirmDelete}\n              disabled={deleteMutation.isPending}\n              className=\"bg-destructive text-destructive-foreground hover:bg-destructive/90\"\n              data-testid=\"button-confirm-delete\"\n            >\n              {deleteMutation.isPending ? \"Deleting...\" : \"Delete\"}\n            </AlertDialogAction>\n          </AlertDialogFooter>\n        </AlertDialogContent>\n      </AlertDialog>\n    </div>\n  );\n}","size_bytes":27955},"import-csv.js":{"content":"const fs = require('fs');\nconst csvParser = require('csv-parser');\nconst { insertPodcastSchema } = require('./shared/schema');\n\nasync function importCSV() {\n  const csvFilePath = './attached_assets/100 Podcasts - Podcast Directory - Foglio1 (1)_1758208541511.csv';\n  \n  const podcasts = [];\n  const errors = [];\n  let rowNumber = 0;\n\n  return new Promise((resolve, reject) => {\n    fs.createReadStream(csvFilePath)\n      .pipe(csvParser())\n      .on('headers', (headers) => {\n        console.log('CSV Headers found:', headers);\n      })\n      .on('data', (row) => {\n        rowNumber++;\n        \n        try {\n          // Enhanced column mapping with flexible matching\n          const getColumnValue = (columnNames) => {\n            for (const colName of columnNames) {\n              const exactMatch = row[colName];\n              if (exactMatch !== undefined && exactMatch !== null && String(exactMatch).trim() !== '') {\n                return String(exactMatch).trim();\n              }\n              \n              // Try case-insensitive match\n              const caseInsensitiveMatch = Object.keys(row).find(key => \n                key.toLowerCase() === colName.toLowerCase()\n              );\n              if (caseInsensitiveMatch && row[caseInsensitiveMatch] && String(row[caseInsensitiveMatch]).trim() !== '') {\n                return String(row[caseInsensitiveMatch]).trim();\n              }\n            }\n            return undefined;\n          };\n\n          // Map CSV columns to podcast schema with flexible matching\n          const title = getColumnValue([\n            'Podcast Title', 'title', 'Title', 'TITLE', 'podcast_title', 'name', 'Name'\n          ]);\n          \n          const host = getColumnValue([\n            'Podcast Host(s)', 'host', 'Host', 'HOST', 'hosts', 'Hosts', 'podcast_host'\n          ]);\n          \n          const country = getColumnValue([\n            'Country of Production', 'country', 'Country', 'COUNTRY', 'nation', 'location'\n          ]) || 'Unknown';\n          \n          const language = getColumnValue([\n            'Primary Language(s) of the Podcast', 'Primary Language(s)', 'language', 'Language', 'LANGUAGE', 'lang', 'languages',\n            'Lingua', 'lingua', 'LINGUA', 'linguaggio', 'Linguaggio', 'idioma', 'idiomas',\n            'Primary Language', 'primary_language', 'main_language', 'podcast_language',\n            'spoken_language', 'audio_language'\n          ]) || 'English';\n          \n          const yearStr = getColumnValue([\n            'Year Launched', 'year', 'Year', 'YEAR', 'launch_year', 'start_year'\n          ]) || String(new Date().getFullYear());\n          \n          const status = getColumnValue([\n            'Is the podcast currently active?', 'Is currently active?', 'status', 'Status', 'STATUS', 'active', 'Active'\n          ]) || 'Active';\n          \n          const categoriesStr = getColumnValue([\n            'Categories', 'categories', 'Category', 'category', 'CATEGORIES', 'genre', 'genres'\n          ]) || '';\n          \n          const episodeLength = getColumnValue([\n            'Typical Episode Length', 'Episode Length', 'episodeLength', 'episode_length', 'length', 'duration'\n          ]);\n          \n          const episodes = getColumnValue([\n            'Number of episodes of your podcast published to date', 'Episodes', 'episodes', 'episode_count', 'total_episodes'\n          ]);\n          \n          const description = getColumnValue([\n            'One-sentence description for the directory listing', 'Description', 'description', 'desc', 'about', 'summary'\n          ]);\n          \n          const imageUrl = getColumnValue([\n            'Logo', 'logo', 'LOGO', 'image', 'Image', 'imageUrl', 'image_url', 'podcast_logo'\n          ]);\n\n          // Validate required fields\n          if (!title) {\n            throw new Error(`Missing title. Available columns: ${Object.keys(row).join(', ')}`);\n          }\n          if (!host) {\n            throw new Error(`Missing host. Available columns: ${Object.keys(row).join(', ')}`);\n          }\n          \n          // Parse year with validation\n          let parsedYear = new Date().getFullYear();\n          if (yearStr && !isNaN(parseInt(yearStr))) {\n            parsedYear = parseInt(yearStr);\n          }\n\n          const podcastData = {\n            title,\n            host,\n            country,\n            language,\n            year: parsedYear,\n            status,\n            categories: categoriesStr.split(',').map(s => s.trim()).filter(Boolean),\n            episodeLength,\n            episodes,\n            description,\n            socialLinks: {\n              spotify: getColumnValue(['Spotify Link', 'Spotify URL', 'spotify', 'Spotify', 'spotify_url']),\n              instagram: getColumnValue(['Instagram @', 'Instagram URL', 'instagram', 'Instagram', 'instagram_url']),\n              youtube: getColumnValue(['YouTube Link', 'YouTube URL', 'youtube', 'Youtube', 'youtube_url']),\n              website: getColumnValue(['Website', 'Website URL', 'website', 'site', 'url']),\n              apple: getColumnValue(['Apple Pods Link', 'Apple URL', 'apple', 'Apple', 'apple_url']),\n            },\n            imageUrl,\n          };\n\n          podcasts.push(podcastData);\n          \n          if (rowNumber <= 5) {\n            console.log(`Row ${rowNumber} processed:`, {\n              title: podcastData.title,\n              host: podcastData.host,\n              imageUrl: podcastData.imageUrl ? 'HAS_IMAGE' : 'NO_IMAGE'\n            });\n          }\n          \n        } catch (error) {\n          const errorMsg = error instanceof Error ? error.message : 'Invalid data';\n          errors.push(`Row ${rowNumber}: ${errorMsg}`);\n          console.error(`Row ${rowNumber} error:`, errorMsg);\n        }\n      })\n      .on('end', () => {\n        console.log(`\\n=== CSV Processing Complete ===`);\n        console.log(`Total rows processed: ${rowNumber}`);\n        console.log(`Valid podcasts: ${podcasts.length}`);\n        console.log(`Errors: ${errors.length}`);\n        \n        if (errors.length > 0) {\n          console.log('\\nFirst 10 errors:');\n          errors.slice(0, 10).forEach(error => console.log('  -', error));\n        }\n        \n        // Show sample of valid podcasts\n        console.log('\\nFirst 3 valid podcasts:');\n        podcasts.slice(0, 3).forEach((p, i) => {\n          console.log(`  ${i+1}. \"${p.title}\" by ${p.host} (${p.country}) - Image: ${p.imageUrl ? 'YES' : 'NO'}`);\n        });\n        \n        resolve({ podcasts, errors, rowNumber });\n      })\n      .on('error', reject);\n  });\n}\n\n// Run the import\nimportCSV()\n  .then((result) => {\n    console.log('\\n=== Import Summary ===');\n    console.log(`Total podcasts to import: ${result.podcasts.length}`);\n    console.log(`Podcasts with images: ${result.podcasts.filter(p => p.imageUrl).length}`);\n    console.log(`Errors encountered: ${result.errors.length}`);\n    \n    // Save results to JSON for inspection\n    fs.writeFileSync('./import-results.json', JSON.stringify(result, null, 2));\n    console.log('\\nResults saved to import-results.json');\n  })\n  .catch(console.error);","size_bytes":7103},"server/auth.ts":{"content":"import { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport session from \"express-session\";\nimport type { Express, RequestHandler } from \"express\";\nimport connectPg from \"connect-pg-simple\";\nimport rateLimit, { ipKeyGenerator } from \"express-rate-limit\";\nimport { storage } from \"./storage\";\nimport type { User } from \"@shared/schema\";\nimport { registerUserSchema, loginUserSchema } from \"@shared/schema\";\n\nconst scryptAsync = promisify(scrypt);\n\n// In-memory store for username-based rate limiting and exponential backoff\ninterface AttemptData {\n  count: number;\n  lastAttempt: number;\n  nextAllowedAttempt: number;\n}\n\nconst ipAttempts = new Map<string, AttemptData>();\nconst usernameAttempts = new Map<string, AttemptData>();\n\n// Clean up old entries every 30 minutes to prevent memory leaks\nsetInterval(() => {\n  const now = Date.now();\n  const thirtyMinutes = 30 * 60 * 1000;\n  \n  Array.from(ipAttempts.entries()).forEach(([key, data]) => {\n    if (now - data.lastAttempt > thirtyMinutes) {\n      ipAttempts.delete(key);\n    }\n  });\n  \n  Array.from(usernameAttempts.entries()).forEach(([key, data]) => {\n    if (now - data.lastAttempt > thirtyMinutes) {\n      usernameAttempts.delete(key);\n    }\n  });\n}, 30 * 60 * 1000);\n\n// Helper function to calculate exponential backoff delay\nfunction calculateBackoffDelay(attemptCount: number): number {\n  // Exponential backoff: 2^(attempts-1) seconds, max 15 minutes\n  const baseDelay = Math.pow(2, Math.max(0, attemptCount - 1)) * 1000;\n  const maxDelay = 15 * 60 * 1000; // 15 minutes\n  return Math.min(baseDelay, maxDelay);\n}\n\n// Custom middleware for username-based rate limiting with exponential backoff\nfunction createUsernameRateLimit(): RequestHandler {\n  return (req, res, next) => {\n    const identifier = ipKeyGenerator(req.ip || '') || 'unknown';\n    const username = req.body?.username?.trim().toLowerCase();\n    \n    if (!username) {\n      return next();\n    }\n    \n    const now = Date.now();\n    const ipData = ipAttempts.get(identifier) || { count: 0, lastAttempt: 0, nextAllowedAttempt: 0 };\n    const usernameData = usernameAttempts.get(username) || { count: 0, lastAttempt: 0, nextAllowedAttempt: 0 };\n    \n    // Check if either IP or username is currently blocked\n    if (now < ipData.nextAllowedAttempt || now < usernameData.nextAllowedAttempt) {\n      const remainingTime = Math.max(\n        Math.ceil((ipData.nextAllowedAttempt - now) / 1000),\n        Math.ceil((usernameData.nextAllowedAttempt - now) / 1000)\n      );\n      \n      return res.status(429).json({\n        message: 'Too many failed attempts. Please try again later.',\n        retryAfter: remainingTime\n      });\n    }\n    \n    // Store original end function to intercept response\n    const originalEnd = res.end;\n    res.end = function(this: typeof res, ...args: any[]): typeof res {\n      // Check if this was a failed authentication attempt (401 status)\n      if (res.statusCode === 401) {\n        // Update attempt counters for both IP and username\n        ipData.count++;\n        ipData.lastAttempt = now;\n        ipData.nextAllowedAttempt = now + calculateBackoffDelay(ipData.count);\n        ipAttempts.set(identifier, ipData);\n        \n        usernameData.count++;\n        usernameData.lastAttempt = now;\n        usernameData.nextAllowedAttempt = now + calculateBackoffDelay(usernameData.count);\n        usernameAttempts.set(username, usernameData);\n        \n        console.log(`Failed login attempt for user '${username}' from IP '${identifier}'. IP attempts: ${ipData.count}, Username attempts: ${usernameData.count}`);\n      } else if (res.statusCode >= 200 && res.statusCode < 300) {\n        // Successful login - reset counters for both IP and username\n        ipAttempts.delete(identifier);\n        usernameAttempts.delete(username);\n        console.log(`Successful login for user '${username}' from IP '${identifier}'. Rate limit counters reset.`);\n      }\n      \n      // Call original end function with all original arguments\n      return (originalEnd as any).apply(this, args);\n    };\n    \n    next();\n  };\n}\n\n// IP-based rate limiting for registration (more permissive)\nconst registerRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 5, // Limit each IP to 5 registration attempts per windowMs\n  message: {\n    message: 'Too many registration attempts from this IP. Please try again in 15 minutes.',\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  keyGenerator: (req, res) => ipKeyGenerator(req.ip || ''),\n  handler: (req, res) => {\n    console.log(`Registration rate limit exceeded for IP: ${ipKeyGenerator(req.ip || '')}`);\n    res.status(429).json({\n      message: 'Too many registration attempts from this IP. Please try again in 15 minutes.',\n      retryAfter: 900 // 15 minutes in seconds\n    });\n  },\n});\n\n// IP-based rate limiting for login (stricter)\nconst loginRateLimit = rateLimit({\n  windowMs: 15 * 60 * 1000, // 15 minutes\n  max: 10, // Limit each IP to 10 login attempts per windowMs\n  message: {\n    message: 'Too many login attempts from this IP. Please try again in 15 minutes.',\n  },\n  standardHeaders: true,\n  legacyHeaders: false,\n  keyGenerator: (req, res) => ipKeyGenerator(req.ip || ''),\n  handler: (req, res) => {\n    console.log(`Login rate limit exceeded for IP: ${ipKeyGenerator(req.ip || '')}`);\n    res.status(429).json({\n      message: 'Too many login attempts from this IP. Please try again in 15 minutes.',\n      retryAfter: 900 // 15 minutes in seconds\n    });\n  },\n});\n\n// Create username rate limiting middleware instance\nconst usernameRateLimit = createUsernameRateLimit();\n\n// Password hashing utilities\nexport async function hashPassword(password: string): Promise<string> {\n  const salt = randomBytes(16);\n  const derivedKey = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${salt.toString('hex')}:${derivedKey.toString('hex')}`;\n}\n\nexport async function verifyPassword(password: string, hashedPassword: string): Promise<boolean> {\n  const [saltHex, keyHex] = hashedPassword.split(':');\n  const salt = Buffer.from(saltHex, 'hex');\n  const storedKey = Buffer.from(keyHex, 'hex');\n  const derivedKey = (await scryptAsync(password, salt, 64)) as Buffer;\n  return timingSafeEqual(storedKey, derivedKey);\n}\n\n// Session configuration\nexport function getSession() {\n  const sessionTtl = 7 * 24 * 60 * 60 * 1000; // 1 week\n  const pgStore = connectPg(session);\n  const sessionStore = new pgStore({\n    conString: process.env.DATABASE_URL,\n    createTableIfMissing: false,\n    ttl: sessionTtl,\n    tableName: \"sessions\",\n  });\n  \n  return session({\n    secret: process.env.SESSION_SECRET!,\n    store: sessionStore,\n    resave: false,\n    saveUninitialized: false,\n    cookie: {\n      httpOnly: true,\n      secure: process.env.NODE_ENV === 'production',\n      // Use 'none' for iframe contexts to allow cross-site cookies\n      // This will be dynamically adjusted based on request context\n      sameSite: process.env.NODE_ENV === 'production' ? 'none' : 'lax',\n      maxAge: sessionTtl,\n    },\n  });\n}\n\n// Dynamic session configuration for iframe contexts\nexport function configureSessionForIframe(req: any, res: any, next: any) {\n  const isIframeContext = req.get('X-Iframe-Context') === 'true' || \n                         req.query.iframe === 'true' ||\n                         req.path.includes('/iframe');\n  \n  if (isIframeContext) {\n    // For iframe contexts, we need to be more permissive with cookies\n    const originalSetCookie = res.setHeader;\n    res.setHeader = function(name: string, value: any) {\n      if (name.toLowerCase() === 'set-cookie') {\n        // Modify cookie settings for iframe compatibility\n        if (Array.isArray(value)) {\n          value = value.map((cookie: string) => {\n            if (cookie.includes('connect.sid')) {\n              // Ensure SameSite=None for iframe contexts in production\n              if (process.env.NODE_ENV === 'production') {\n                cookie = cookie.replace(/SameSite=\\w+/i, 'SameSite=None');\n                if (!cookie.includes('Secure')) {\n                  cookie += '; Secure';\n                }\n              }\n              // Add additional flags for iframe compatibility\n              if (!cookie.includes('Partitioned')) {\n                cookie += '; Partitioned';\n              }\n            }\n            return cookie;\n          });\n        } else if (typeof value === 'string' && value.includes('connect.sid')) {\n          if (process.env.NODE_ENV === 'production') {\n            value = value.replace(/SameSite=\\w+/i, 'SameSite=None');\n            if (!value.includes('Secure')) {\n              value += '; Secure';\n            }\n          }\n          if (!value.includes('Partitioned')) {\n            value += '; Partitioned';\n          }\n        }\n      }\n      return originalSetCookie.call(this, name, value);\n    };\n  }\n  \n  next();\n}\n\n// Passport setup\nexport async function setupAuth(app: Express) {\n  app.set(\"trust proxy\", 1);\n  \n  // Add iframe-friendly session configuration before session initialization\n  app.use(configureSessionForIframe);\n  \n  app.use(getSession());\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  // Local strategy configuration\n  passport.use(new LocalStrategy(\n    {\n      usernameField: 'username',\n      passwordField: 'password'\n    },\n    async (username: string, password: string, done) => {\n      try {\n        const user = await storage.getUserByUsername(username);\n        if (!user) {\n          return done(null, false, { message: 'Invalid username or password' });\n        }\n\n        const isValid = await verifyPassword(password, user.password);\n        if (!isValid) {\n          return done(null, false, { message: 'Invalid username or password' });\n        }\n\n        // Remove password from user object before passing to session\n        const { password: _, ...userWithoutPassword } = user;\n        return done(null, userWithoutPassword);\n      } catch (error) {\n        return done(error);\n      }\n    }\n  ));\n\n  // Serialize user for session\n  passport.serializeUser((user: any, done) => {\n    done(null, user.id);\n  });\n\n  // Deserialize user from session\n  passport.deserializeUser(async (id: string, done) => {\n    try {\n      const user = await storage.getUser(id);\n      if (user) {\n        // Remove password from user object\n        const { password: _, ...userWithoutPassword } = user;\n        done(null, userWithoutPassword);\n      } else {\n        done(null, false);\n      }\n    } catch (error) {\n      done(error);\n    }\n  });\n\n  // Auth routes with brute-force protection\n  app.post('/api/register', registerRateLimit, async (req, res) => {\n    try {\n      // Validate request body\n      const validationResult = registerUserSchema.safeParse(req.body);\n      if (!validationResult.success) {\n        return res.status(400).json({ \n          message: 'Invalid request data', \n          errors: validationResult.error.issues \n        });\n      }\n      \n      const { username, password, email, firstName, lastName } = validationResult.data;\n\n      // Check if username already exists\n      const existingUser = await storage.getUserByUsername(username);\n      if (existingUser) {\n        return res.status(400).json({ message: 'Username already exists' });\n      }\n\n      // Check if email already exists\n      if (email) {\n        const existingEmailUser = await storage.getUserByEmail(email);\n        if (existingEmailUser) {\n          return res.status(400).json({ message: 'Email already registered' });\n        }\n      }\n\n      // Hash password\n      const hashedPassword = await hashPassword(password);\n\n      // Create user\n      const newUser = await storage.createUser({\n        username,\n        password: hashedPassword,\n        email: email || null,\n        firstName: firstName || null,\n        lastName: lastName || null,\n        isAdmin: false,\n      });\n\n      // Remove password from response\n      const { password: _, ...userWithoutPassword } = newUser;\n      \n      // Log user in\n      req.login(userWithoutPassword, (err) => {\n        if (err) {\n          return res.status(500).json({ message: 'Registration successful but login failed' });\n        }\n        res.status(201).json({ user: userWithoutPassword });\n      });\n    } catch (error) {\n      console.error('Registration error:', error);\n      res.status(500).json({ message: 'Internal server error' });\n    }\n  });\n\n  app.post('/api/login', loginRateLimit, usernameRateLimit, (req, res, next) => {\n    // Validate request body\n    const validationResult = loginUserSchema.safeParse(req.body);\n    if (!validationResult.success) {\n      return res.status(400).json({ \n        message: 'Invalid request data', \n        errors: validationResult.error.issues \n      });\n    }\n\n    passport.authenticate('local', (err: any, user: any, info: any) => {\n      if (err) {\n        return res.status(500).json({ message: 'Internal server error' });\n      }\n      if (!user) {\n        return res.status(401).json({ message: info?.message || 'Authentication failed' });\n      }\n\n      // Session fixation protection: regenerate session on successful login\n      req.session.regenerate((err) => {\n        if (err) {\n          return res.status(500).json({ message: 'Login failed' });\n        }\n        \n        req.login(user, (err) => {\n          if (err) {\n            return res.status(500).json({ message: 'Login failed' });\n          }\n          res.json({ user });\n        });\n      });\n    })(req, res, next);\n  });\n\n  app.post('/api/logout', (req, res) => {\n    req.logout((err) => {\n      if (err) {\n        return res.status(500).json({ message: 'Logout failed' });\n      }\n      \n      // Session fixation protection: destroy session on logout\n      req.session.destroy((err) => {\n        if (err) {\n          return res.status(500).json({ message: 'Logout failed' });\n        }\n        \n        // Clear session cookie\n        res.clearCookie('connect.sid');\n        res.json({ message: 'Logged out successfully' });\n      });\n    });\n  });\n\n  app.get('/api/user', (req, res) => {\n    if (req.isAuthenticated() && req.user) {\n      res.json(req.user);\n    } else {\n      res.status(401).json({ message: 'Not authenticated' });\n    }\n  });\n\n  // Test endpoint for rate limiting (development only)\n  if (process.env.NODE_ENV !== 'production') {\n    app.post('/api/test-rate-limit', rateLimit({\n      windowMs: 60 * 1000, // 1 minute\n      max: 3, // 3 requests per minute\n      keyGenerator: (req, res) => ipKeyGenerator(req.ip || ''),\n      handler: (req, res) => {\n        console.log(`Test rate limit exceeded for IP: ${ipKeyGenerator(req.ip || '')}`);\n        res.status(429).json({ message: 'Rate limit test - too many requests' });\n      },\n    }), (req, res) => {\n      console.log(`Test rate limit request from IP: ${ipKeyGenerator(req.ip || '')}`);\n      res.json({ message: 'Rate limit test endpoint', timestamp: new Date().toISOString() });\n    });\n  }\n}\n\n// Authentication middleware\nexport const isAuthenticated: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ message: 'Authentication required' });\n};\n\n// Admin middleware\nexport const isAdmin: RequestHandler = (req, res, next) => {\n  if (req.isAuthenticated() && (req.user as any)?.isAdmin) {\n    return next();\n  }\n  res.status(403).json({ message: 'Admin access required' });\n};\n\n// Combined auth and admin middleware\nexport const requireAdmin: RequestHandler = (req, res, next) => {\n  if (!req.isAuthenticated()) {\n    return res.status(401).json({ message: 'Authentication required' });\n  }\n  if (!(req.user as any)?.isAdmin) {\n    return res.status(403).json({ message: 'Admin access required' });\n  }\n  next();\n};\n\n// Seed admin user\nexport async function seedAdminUser() {\n  try {\n    const adminUsername = 'AdminAnselmo';\n    \n    // Require ADMIN_PASSWORD environment variable in production\n    const adminPassword = process.env.ADMIN_PASSWORD;\n    if (!adminPassword) {\n      if (process.env.NODE_ENV === 'production') {\n        throw new Error('ADMIN_PASSWORD environment variable is required in production');\n      } else {\n        console.warn('Warning: ADMIN_PASSWORD not set. Skipping admin user creation in development.');\n        return;\n      }\n    }\n    \n    // Check if admin user already exists\n    const existingAdmin = await storage.getUserByUsername(adminUsername);\n    if (existingAdmin) {\n      console.log('Admin user already exists');\n      return;\n    }\n\n    // Create admin user\n    const hashedPassword = await hashPassword(adminPassword);\n    await storage.createUser({\n      username: adminUsername,\n      password: hashedPassword,\n      email: 'admin@winepodcast.com',\n      firstName: 'Admin',\n      lastName: 'Anselmo',\n      isAdmin: true,\n    });\n\n    console.log('Admin user created successfully');\n  } catch (error) {\n    console.error('Error seeding admin user:', error);\n  }\n}","size_bytes":17064},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/useAuth\";\nimport { Loader2 } from \"lucide-react\";\n\ninterface ProtectedRouteProps {\n  children: React.ReactNode;\n  requireAdmin?: boolean;\n  fallback?: React.ReactNode;\n}\n\nexport function ProtectedRoute({ \n  children, \n  requireAdmin = false, \n  fallback \n}: ProtectedRouteProps) {\n  const { user, isLoading, isAuthenticated, isAdmin } = useAuth();\n\n  // Show loading state while checking authentication\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"flex flex-col items-center gap-4\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          <p className=\"text-muted-foreground\">Loading...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Redirect to auth page if not authenticated\n  if (!isAuthenticated) {\n    if (fallback) {\n      return <>{fallback}</>;\n    }\n    \n    // Redirect to auth page\n    window.location.href = '/auth';\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"flex flex-col items-center gap-4\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          <p className=\"text-muted-foreground\">Redirecting to login...</p>\n        </div>\n      </div>\n    );\n  }\n\n  // Check admin requirement\n  if (requireAdmin && !isAdmin) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center bg-background\">\n        <div className=\"max-w-md mx-auto text-center p-6\">\n          <h1 className=\"text-2xl font-bold text-foreground mb-4\">Access Denied</h1>\n          <p className=\"text-muted-foreground mb-6\">\n            You don't have permission to access this page. Admin privileges required.\n          </p>\n          <button\n            onClick={() => window.location.href = '/'}\n            className=\"px-4 py-2 bg-primary text-primary-foreground rounded-md hover:bg-primary/90 transition-colors\"\n            data-testid=\"button-back-home\"\n          >\n            Back to Home\n          </button>\n        </div>\n      </div>\n    );\n  }\n\n  return <>{children}</>;\n}\n\n// Auth Provider wrapper component\ninterface AuthProviderProps {\n  children: React.ReactNode;\n}\n\nexport function AuthProvider({ children }: AuthProviderProps) {\n  return <>{children}</>;\n}","size_bytes":2326},"client/src/pages/auth-page.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/useAuth\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Alert, AlertDescription } from \"@/components/ui/alert\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport { Loader2, Wine, Eye, EyeOff } from \"lucide-react\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { loginUserSchema, registerUserSchema, type LoginUser, type RegisterUser } from \"@shared/schema\";\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from \"@/components/ui/form\";\nimport { useLocation } from \"wouter\";\n\nexport default function AuthPage() {\n  const [, setLocation] = useLocation();\n  const [activeTab, setActiveTab] = useState<\"login\" | \"register\">(\"login\");\n  const [showPassword, setShowPassword] = useState(false);\n  const [showConfirmPassword, setShowConfirmPassword] = useState(false);\n  const [authError, setAuthError] = useState<string>(\"\");\n  \n  const { login, register, loginPending, registerPending, isAuthenticated } = useAuth();\n\n  // Redirect if already authenticated\n  if (isAuthenticated) {\n    setLocation(\"/\");\n    return null;\n  }\n\n  // Login form\n  const loginForm = useForm<LoginUser>({\n    resolver: zodResolver(loginUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n    },\n  });\n\n  // Register form\n  const registerForm = useForm<RegisterUser>({\n    resolver: zodResolver(registerUserSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      email: \"\",\n      firstName: \"\",\n      lastName: \"\",\n    },\n  });\n\n  const handleLogin = async (data: LoginUser) => {\n    setAuthError(\"\");\n    const result = await login(data);\n    \n    if (result.success) {\n      setLocation(\"/\");\n    } else {\n      setAuthError(result.error || \"Login failed\");\n    }\n  };\n\n  const handleRegister = async (data: RegisterUser) => {\n    setAuthError(\"\");\n    const result = await register(data);\n    \n    if (result.success) {\n      setLocation(\"/\");\n    } else {\n      setAuthError(result.error || \"Registration failed\");\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen wine-gradient flex items-center justify-center p-4 relative overflow-hidden\">\n      {/* Background elements */}\n      <div className=\"absolute inset-0 bg-black/20\"></div>\n      <div className=\"absolute inset-0\">\n        <div className=\"absolute top-10 left-10 w-20 h-20 bg-white/10 rounded-full blur-xl\"></div>\n        <div className=\"absolute bottom-20 right-20 w-32 h-32 bg-rose-200/20 rounded-full blur-2xl\"></div>\n        <div className=\"absolute top-1/2 left-1/4 w-16 h-16 bg-amber-200/20 rounded-full blur-xl\"></div>\n      </div>\n      \n      <div className=\"w-full max-w-md relative z-10\">\n        {/* Header */}\n        <div className=\"text-center mb-8\">\n          <div className=\"flex items-center justify-center gap-3 mb-4\">\n            <Wine className=\"h-8 w-8 text-white\" />\n            <h1 className=\"text-3xl font-bold text-white\">Wine Podcast Directory</h1>\n          </div>\n          <p className=\"text-white/80 text-lg\">\n            Discover and manage premium wine podcasts\n          </p>\n        </div>\n\n        <Card className=\"bg-white/95 backdrop-blur-sm border-0 shadow-2xl\">\n          <CardHeader className=\"space-y-1 pb-6\">\n            <CardTitle className=\"text-2xl text-center text-wine-dark\">\n              Welcome\n            </CardTitle>\n            <CardDescription className=\"text-center text-muted-foreground\">\n              Sign in to your account or create a new one\n            </CardDescription>\n          </CardHeader>\n          \n          <CardContent>\n            <Tabs value={activeTab} onValueChange={(value) => setActiveTab(value as \"login\" | \"register\")} className=\"w-full\">\n              <TabsList className=\"grid w-full grid-cols-2 mb-6\">\n                <TabsTrigger value=\"login\" className=\"text-sm\" data-testid=\"tab-login\">\n                  Sign In\n                </TabsTrigger>\n                <TabsTrigger value=\"register\" className=\"text-sm\" data-testid=\"tab-register\">\n                  Sign Up\n                </TabsTrigger>\n              </TabsList>\n\n              {authError && (\n                <Alert variant=\"destructive\" className=\"mb-6\">\n                  <AlertDescription data-testid=\"text-auth-error\">\n                    {authError}\n                  </AlertDescription>\n                </Alert>\n              )}\n\n              <TabsContent value=\"login\" className=\"space-y-4\">\n                <Form {...loginForm}>\n                  <form onSubmit={loginForm.handleSubmit(handleLogin)} className=\"space-y-4\">\n                    <FormField\n                      control={loginForm.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Username</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field} \n                              placeholder=\"Enter your username\"\n                              data-testid=\"input-username\"\n                              disabled={loginPending}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={loginForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Input \n                                {...field} \n                                type={showPassword ? \"text\" : \"password\"}\n                                placeholder=\"Enter your password\"\n                                data-testid=\"input-password\"\n                                disabled={loginPending}\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                onClick={() => setShowPassword(!showPassword)}\n                                disabled={loginPending}\n                                data-testid=\"button-toggle-password\"\n                              >\n                                {showPassword ? (\n                                  <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                                ) : (\n                                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                                )}\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-wine hover:bg-wine-dark text-white\"\n                      disabled={loginPending}\n                      data-testid=\"button-login\"\n                    >\n                      {loginPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Signing In...\n                        </>\n                      ) : (\n                        \"Sign In\"\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n\n              <TabsContent value=\"register\" className=\"space-y-4\">\n                <Form {...registerForm}>\n                  <form onSubmit={registerForm.handleSubmit(handleRegister)} className=\"space-y-4\">\n                    <div className=\"grid grid-cols-2 gap-4\">\n                      <FormField\n                        control={registerForm.control}\n                        name=\"firstName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>First Name</FormLabel>\n                            <FormControl>\n                              <Input \n                                {...field}\n                                value={field.value || \"\"}\n                                placeholder=\"John\"\n                                data-testid=\"input-first-name\"\n                                disabled={registerPending}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                      \n                      <FormField\n                        control={registerForm.control}\n                        name=\"lastName\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Last Name</FormLabel>\n                            <FormControl>\n                              <Input \n                                {...field}\n                                value={field.value || \"\"}\n                                placeholder=\"Doe\"\n                                data-testid=\"input-last-name\"\n                                disabled={registerPending}\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n                    </div>\n                    \n                    <FormField\n                      control={registerForm.control}\n                      name=\"username\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Username</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field} \n                              placeholder=\"Choose a username\"\n                              data-testid=\"input-register-username\"\n                              disabled={registerPending}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={registerForm.control}\n                      name=\"email\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Email</FormLabel>\n                          <FormControl>\n                            <Input \n                              {...field}\n                              value={field.value || \"\"}\n                              type=\"email\"\n                              placeholder=\"your@email.com\"\n                              data-testid=\"input-email\"\n                              disabled={registerPending}\n                            />\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={registerForm.control}\n                      name=\"password\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Password</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Input \n                                {...field} \n                                type={showPassword ? \"text\" : \"password\"}\n                                placeholder=\"Choose a secure password\"\n                                data-testid=\"input-register-password\"\n                                disabled={registerPending}\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                onClick={() => setShowPassword(!showPassword)}\n                                disabled={registerPending}\n                                data-testid=\"button-toggle-register-password\"\n                              >\n                                {showPassword ? (\n                                  <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                                ) : (\n                                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                                )}\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <FormField\n                      control={registerForm.control}\n                      name=\"confirmPassword\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Confirm Password</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Input \n                                {...field} \n                                type={showConfirmPassword ? \"text\" : \"password\"}\n                                placeholder=\"Confirm your password\"\n                                data-testid=\"input-confirm-password\"\n                                disabled={registerPending}\n                              />\n                              <Button\n                                type=\"button\"\n                                variant=\"ghost\"\n                                size=\"sm\"\n                                className=\"absolute right-0 top-0 h-full px-3 py-2 hover:bg-transparent\"\n                                onClick={() => setShowConfirmPassword(!showConfirmPassword)}\n                                disabled={registerPending}\n                                data-testid=\"button-toggle-confirm-password\"\n                              >\n                                {showConfirmPassword ? (\n                                  <EyeOff className=\"h-4 w-4 text-muted-foreground\" />\n                                ) : (\n                                  <Eye className=\"h-4 w-4 text-muted-foreground\" />\n                                )}\n                              </Button>\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                    \n                    <Button \n                      type=\"submit\" \n                      className=\"w-full bg-wine hover:bg-wine-dark text-white\"\n                      disabled={registerPending}\n                      data-testid=\"button-register\"\n                    >\n                      {registerPending ? (\n                        <>\n                          <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                          Creating Account...\n                        </>\n                      ) : (\n                        \"Create Account\"\n                      )}\n                    </Button>\n                  </form>\n                </Form>\n              </TabsContent>\n            </Tabs>\n          </CardContent>\n        </Card>\n\n        {/* Footer */}\n        <div className=\"text-center mt-8\">\n          <p className=\"text-white/60 text-sm\">\n            Secure authentication for wine enthusiasts\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}","size_bytes":16474}},"version":1}